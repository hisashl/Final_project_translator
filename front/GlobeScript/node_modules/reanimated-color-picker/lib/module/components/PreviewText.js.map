{"version":3,"file":"PreviewText.js","names":["React","TextInput","Animated","useAnimatedProps","useAnimatedRef","useDerivedValue","usePickerContext","styles","isWeb","addWhitelistedNativeProps","text","AnimatedTextInput","createAnimatedComponent","PreviewText","style","colorFormat","returnedResults","hueValue","saturationValue","brightnessValue","alphaValue","inputRef","colorString","current","value","animatedProps","createElement","ref","underlineColorAndroid","editable","defaultValue","previewText","pointerEvents"],"sources":["../../src/components/PreviewText.tsx"],"sourcesContent":["import React from 'react';\nimport { TextInput } from 'react-native';\nimport Animated, { useAnimatedProps, useAnimatedRef, useDerivedValue } from 'react-native-reanimated';\n\nimport usePickerContext from '../AppContext';\nimport { styles } from '../styles';\nimport { isWeb } from '../utils';\n\nimport type { PreviewTextProps } from '../types';\n\nAnimated.addWhitelistedNativeProps({ text: true });\nconst AnimatedTextInput = Animated.createAnimatedComponent(TextInput);\n\nexport function PreviewText({ style = {}, colorFormat = 'hex' }: PreviewTextProps) {\n  const { returnedResults, hueValue, saturationValue, brightnessValue, alphaValue } = usePickerContext();\n\n  const inputRef = useAnimatedRef<TextInput>();\n\n  const colorString = useDerivedValue(() => {\n    [colorFormat, hueValue, saturationValue, brightnessValue, alphaValue]; // track changes on Native\n\n    if (isWeb && inputRef.current) {\n      // @ts-expect-error value doesn't exist\n      inputRef.current.value = returnedResults()[colorFormat];\n      return;\n    }\n\n    return returnedResults()[colorFormat];\n  }, [colorFormat, hueValue, saturationValue, brightnessValue, alphaValue]); // track changes on WEB\n\n  const animatedProps = useAnimatedProps(() => ({ text: colorString.value }) as never, [colorString]);\n\n  return (\n    <AnimatedTextInput\n      ref={inputRef}\n      underlineColorAndroid='transparent'\n      editable={false}\n      defaultValue={colorString.value}\n      style={[styles.previewText, style]}\n      animatedProps={animatedProps}\n      pointerEvents='none'\n    />\n  );\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,cAAc;AACxC,OAAOC,QAAQ,IAAIC,gBAAgB,EAAEC,cAAc,EAAEC,eAAe,QAAQ,yBAAyB;AAErG,OAAOC,gBAAgB;AACvB,SAASC,MAAM;AACf,SAASC,KAAK;AAIdN,QAAQ,CAACO,yBAAyB,CAAC;EAAEC,IAAI,EAAE;AAAK,CAAC,CAAC;AAClD,MAAMC,iBAAiB,GAAGT,QAAQ,CAACU,uBAAuB,CAACX,SAAS,CAAC;AAErE,OAAO,SAASY,WAAWA,CAAC;EAAEC,KAAK,GAAG,CAAC,CAAC;EAAEC,WAAW,GAAG;AAAwB,CAAC,EAAE;EACjF,MAAM;IAAEC,eAAe;IAAEC,QAAQ;IAAEC,eAAe;IAAEC,eAAe;IAAEC;EAAW,CAAC,GAAGd,gBAAgB,CAAC,CAAC;EAEtG,MAAMe,QAAQ,GAAGjB,cAAc,CAAY,CAAC;EAE5C,MAAMkB,WAAW,GAAGjB,eAAe,CAAC,MAAM;IACxC,CAACU,WAAW,EAAEE,QAAQ,EAAEC,eAAe,EAAEC,eAAe,EAAEC,UAAU,CAAC,CAAC,CAAC;;IAEvE,IAAIZ,KAAK,IAAIa,QAAQ,CAACE,OAAO,EAAE;MAC7B;MACAF,QAAQ,CAACE,OAAO,CAACC,KAAK,GAAGR,eAAe,CAAC,CAAC,CAACD,WAAW,CAAC;MACvD;IACF;IAEA,OAAOC,eAAe,CAAC,CAAC,CAACD,WAAW,CAAC;EACvC,CAAC,EAAE,CAACA,WAAW,EAAEE,QAAQ,EAAEC,eAAe,EAAEC,eAAe,EAAEC,UAAU,CAAC,CAAC,CAAC,CAAC;;EAE3E,MAAMK,aAAa,GAAGtB,gBAAgB,CAAC,OAAO;IAAEO,IAAI,EAAEY,WAAW,CAACE;EAAM,CAAC,CAAU,EAAE,CAACF,WAAW,CAAC,CAAC;EAEnG,oBACEtB,KAAA,CAAA0B,aAAA,CAACf,iBAAiB;IAChBgB,GAAG,EAAEN,QAAS;IACdO,qBAAqB,EAAC,aAAa;IACnCC,QAAQ,EAAE,KAAM;IAChBC,YAAY,EAAER,WAAW,CAACE,KAAM;IAChCV,KAAK,EAAE,CAACP,MAAM,CAACwB,WAAW,EAAEjB,KAAK,CAAE;IACnCW,aAAa,EAAEA,aAAc;IAC7BO,aAAa,EAAC;EAAM,CACrB,CAAC;AAEN"}