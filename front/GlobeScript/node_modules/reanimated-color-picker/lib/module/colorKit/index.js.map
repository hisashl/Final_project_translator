{"version":3,"file":"index.js","names":["colorKitUI","NAMED_COLORS","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","COLORS_REGEX","hex3","hex4","hex6","hex8","hsl","hsla","hsv","hsva","hwb","hwba","rgb","rgba","clamp","value","min","max","Math","clampRGB","clampHue","clamp100","clampAlpha","toFixed","randomNumber","random","numberToHexString","c","round","hex","toString","padStart","calculateHueValue","p","q","t","detectColorFormat","color","trim","toLowerCase","key","format","entry","Array","isArray","i","length","test","rgbaKeys","isRgbaOb","every","k","hasOwnProperty","rgbKeys","isRgbOb","hslaKeys","isHslaOb","hslKeys","isHslOb","hsvaKeys","isHsvaOb","hsvKeys","isHsvOb","hwbaKeys","isHwbaOb","hwbKeys","isHwbOb","RGB_string_to_object","colorType","includes","console","error","r","g","b","a","matches","match","parseInt","parseFloat","normalize_RGB_object","RGB_to_HEX","alpha","RGB_to_RGB","RGB_to_HSLA","h","s","l","d","RGB_to_HSVA","v","RGB_to_HWBA","w","RGB_types","string","forceAlpha","array","roundValues","object","HSL_string_to_object","normalize_HSL_object","HSL_to_RGBA","HSL_to_HEX","HSL_to_HSVA","sNew","HSL_to_HWBA","HSV_to_HWBA","HSL_to_HSL","HSL_types","HWB_string_to_object","normalize_HWB_object","HWB_to_RGBA","HWB_to_HEX","HWB_to_HSVA","isNaN","HWB_to_HSLA","HSV_to_HSLA","HWB_to_HWB","HWB_types","HSV_string_to_object","normalize_HSV_object","HSV_to_RGBA","floor","f","sl","sln","HSV_to_HEX","HSV_to_HSV","HSV_types","normalize_HEX","replace","split","map","x","join","HEX_to_RGBA","HEX_to_HSVA","HEX_to_HSLA","HEX_to_HWBA","HEX","RGB","HSL","HWB","HSV","getFormat","getRed","getGreen","getBlue","getHue","getSaturation","getLuminance","getBrightness","getLuminanceWCAG","pow","isDark","luminance","isLight","areColorsEqual","color1","color2","tolerance","rgb1","rgb2","deltaR","deltaG","deltaB","difference","sqrt","contrastRatio","luminance1","luminance2","contrast","returnColorObject","setRed","amount","newR","newColor","increaseRed","decreaseRed","setGreen","newG","increaseGreen","decreaseGreen","setBlue","newB","increaseBlue","decreaseBlue","getAlpha","setAlpha","newA","increaseAlpha","decreaseAlpha","setHue","newH","increaseHue","hue","decreaseHue","spin","degree","spinDegree","setSaturation","newS","saturatedColor","saturate","saturation","desaturate","desaturatedColor","setLuminance","newL","brighten","lum","brightenedColor","darken","darkenedColor","setBrightness","newV","increaseBrightness","decreaseBrightness","blend","percentage","rgba1","rgba2","blendedColor","invert","invertedColor","grayscale","grayColor","randomHslColor","randomHsvColor","randomRgbColor","randomHwbColor","adjustContrast","ratio","color1RGB","channels","adjustLuminance","colorRGB","by","adjustBy","e","colorKit","runOnUI"],"sources":["../../src/colorKit/index.ts"],"sourcesContent":["import type {\n  SupportedColorFormats,\n  ColorFormats,\n  rgbaT,\n  rgbT,\n  hslaT,\n  hslT,\n  hsvaT,\n  hsvT,\n  hwbaT,\n  hwbT,\n  ColorTypes,\n  ConversionMethods,\n} from './types';\n\n// If you find yourself wondering why all of this is within a single function,\n// the reason is that to execute each method on the UI thread, you must include the 'worklet' directive.\n// Functions marked with this directive are transformed by the Reanimated Babel plugin\n// into something like this: `const fun = (function{})()`.\n// Due to the presence of numerous methods,\n// this transformation can lead to a slow initial execution.\n// To address this issue, I consolidated them into a single worklet function.\n\nexport function colorKitUI() {\n  'worklet';\n\n  const NAMED_COLORS = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    gold: '#ffd700',\n    goldenrod: '#daa520',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavender: '#e6e6fa',\n    lavenderblush: '#fff0f5',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n  };\n\n  const COLORS_REGEX: Record<ColorFormats, RegExp | RegExp[]> = {\n    hex3: /^#([A-Fa-f0-9]{3})$/, // #rgb\n    hex4: /^#([A-Fa-f0-9]{3}[A-Fa-f0-9]{1})$/, // #rgba\n    hex6: /^#([A-Fa-f0-9]{6})$/, // #rrggbb\n    hex8: /^#([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i, // #rrggbbaa\n\n    hsl: [\n      /^hsl\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*\\)$/i,\n      /^hsl\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\)$/i,\n    ],\n    hsla: [\n      /^hsla\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*,\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n      /^hsla\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\/\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n    ],\n\n    hsv: [\n      /^hsv\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*\\)$/i,\n      /^hsv\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\)$/i,\n    ],\n    hsva: [\n      /^hsva\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*,\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n      /^hsva\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\/\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n    ],\n\n    hwb: [\n      /^hwb\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*\\)$/i,\n      /^hwb\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\)$/i,\n    ],\n    hwba: [\n      /^hwba\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s*,\\s*([\\d.]+)%\\s*,\\s*([\\d.]+)%\\s*,\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n      /^hwba\\s*\\(\\s*(\\d{1,3})(?:deg)?\\s+([\\d.]+)%\\s+([\\d.]+)%\\s*\\/\\s*(\\d|\\d\\.\\d+)\\s*\\)$/i,\n    ],\n\n    rgb: [/^rgb\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/i, /^rgb\\s*\\(\\s*(\\d{1,3})\\s+(\\d{1,3})\\s+(\\d{1,3})\\s*\\)$/i],\n    rgba: [\n      /^rgba\\s*\\(\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*([\\d.]+)\\s*\\)$/i,\n      /^rgba\\s*\\(\\s*(\\d{1,3})\\s+(\\d{1,3})\\s+(\\d{1,3})\\s*\\/\\s*([\\d.]+)\\s*\\)$/i,\n    ],\n  };\n\n  // * utilities -------------------------------------------------------------\n\n  const clamp = (value: number, min: number, max: number) => {\n    return Math.max(min, Math.min(value, max));\n  };\n\n  const clampRGB = (value: number) => {\n    return clamp(value, 0, 255);\n  };\n\n  const clampHue = (value: number) => {\n    return clamp(value, 0, 360);\n  };\n\n  const clamp100 = (value: number) => {\n    return clamp(value, 0, 100);\n  };\n\n  const clampAlpha = (value: number) => {\n    return clamp(+value.toFixed(2), 0, 1);\n  };\n\n  const randomNumber = (min: number, max: number) => {\n    return Math.random() * (max - min) + min;\n  };\n\n  const numberToHexString = (c: number): string => {\n    c = clampRGB(Math.round(c));\n    const hex = c.toString(16).padStart(2, '0');\n    return hex;\n  };\n\n  const calculateHueValue = (p: number, q: number, t: number): number => {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n  };\n\n  /** - Identify the color format of a given `string` or `object` */\n  const detectColorFormat = (color: SupportedColorFormats): ColorFormats | null => {\n    // color int\n    if (typeof color === 'number') {\n      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) return 'hex8';\n      return null;\n    }\n\n    // color string\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n      for (const key in COLORS_REGEX) {\n        const format = key as ColorFormats;\n        const entry = COLORS_REGEX[format];\n        if (Array.isArray(entry)) {\n          for (let i = 0; i < entry.length; i++) {\n            if (entry[i].test(color)) return format;\n          }\n          continue;\n        }\n        if (entry.test(color)) return format;\n      }\n    }\n\n    // color object\n    if (typeof color === 'object') {\n      const rgbaKeys = ['r', 'g', 'b', 'a'] as (keyof rgbaT)[];\n      const isRgbaOb = rgbaKeys.every(k => color.hasOwnProperty(k) && typeof (color as rgbaT)[k] === 'number');\n      if (isRgbaOb) return 'rgba';\n\n      const rgbKeys = ['r', 'g', 'b'] as (keyof rgbT)[];\n      const isRgbOb = rgbKeys.every(k => color.hasOwnProperty(k) && typeof (color as rgbT)[k] === 'number');\n      if (isRgbOb) return 'rgb';\n\n      const hslaKeys = ['h', 's', 'l', 'a'] as (keyof hslaT)[];\n      const isHslaOb = hslaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hslaT)[k] === 'number');\n      if (isHslaOb) return 'hsla';\n\n      const hslKeys = ['h', 's', 'l'] as (keyof hslT)[];\n      const isHslOb = hslKeys.every(k => color.hasOwnProperty(k) && typeof (color as hslT)[k] === 'number');\n      if (isHslOb) return 'hsl';\n\n      const hsvaKeys = ['h', 's', 'v', 'a'] as (keyof hsvaT)[];\n      const isHsvaOb = hsvaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hsvaT)[k] === 'number');\n      if (isHsvaOb) return 'hsva';\n\n      const hsvKeys = ['h', 's', 'v'] as (keyof hsvT)[];\n      const isHsvOb = hsvKeys.every(k => color.hasOwnProperty(k) && typeof (color as hsvT)[k] === 'number');\n      if (isHsvOb) return 'hsv';\n\n      const hwbaKeys = ['h', 'w', 'b', 'a'] as (keyof hwbaT)[];\n      const isHwbaOb = hwbaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hwbaT)[k] === 'number');\n      if (isHwbaOb) return 'hwba';\n\n      const hwbKeys = ['h', 'w', 'b'] as (keyof hwbT)[];\n      const isHwbOb = hwbKeys.every(k => color.hasOwnProperty(k) && typeof (color as hwbT)[k] === 'number');\n      if (isHwbOb) return 'hwb';\n    }\n\n    return null;\n  };\n\n  // * RGB -------------------------------------------------------------\n\n  /** - Parse `RGB` or `RGBA` color string to an `object` */\n  const RGB_string_to_object = (color: string): rgbaT => {\n    color = color.trim().toLowerCase();\n    const colorType = detectColorFormat(color);\n\n    if (!colorType || !colorType.includes('rgb')) {\n      console.error(\n        '[colorKit.getRgbObject] is unable to parse the string into an `RGB` object. As a result, the color \"black\" will be returned instead.',\n      );\n      return { r: 0, g: 0, b: 0, a: 1 };\n    }\n\n    let matches: RegExpMatchArray | null = null;\n    const entry = COLORS_REGEX[colorType];\n    if (Array.isArray(entry)) {\n      for (let i = 0; i < entry.length; i++) {\n        if (entry[i].test(color)) matches = color.match(entry[i]);\n      }\n    } else {\n      matches = color.match(entry);\n    }\n\n    if (!matches || matches.length < 4) {\n      console.error(\n        '[colorKit.getRgbObject] An error occurred while attempting to destructuring `RGB` values from the given string. As a result, the color \"black\" will be returned instead.',\n      );\n      return { r: 0, g: 0, b: 0, a: 1 };\n    }\n\n    const r = parseInt(matches[1], 10),\n      g = parseInt(matches[2], 10),\n      b = parseInt(matches[3], 10),\n      a = parseFloat(matches[4] ?? '1');\n\n    return {\n      r: clampRGB(r),\n      g: clampRGB(g),\n      b: clampRGB(b),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Ensure that the `RGB` object values are within the correct range and that it has the alpha channel */\n  const normalize_RGB_object = (color: rgbaT | rgbT): rgbaT => {\n    return {\n      r: clampRGB(color.r),\n      g: clampRGB(color.g),\n      b: clampRGB(color.b),\n      a: clampAlpha((color as rgbaT).a ?? 1),\n    };\n  };\n\n  /** - Convert an `RGB` or `RGBA` color to its corresponding `Hex` color */\n  const RGB_to_HEX = (color: string | rgbaT | rgbT): string => {\n    const { r, g, b, a } = typeof color === 'string' ? RGB_string_to_object(color) : normalize_RGB_object(color);\n\n    const red = numberToHexString(r),\n      green = numberToHexString(g),\n      blue = numberToHexString(b),\n      alpha = a === 1 ? '' : numberToHexString(a * 255);\n\n    return `#${red + green + blue + alpha}`;\n  };\n\n  /** - Convert `RGB` or `RGBA` color to an `RGBA` object representation */\n  const RGB_to_RGB = (color: string | rgbaT | rgbT): rgbaT => {\n    return typeof color === 'string' ? RGB_string_to_object(color) : normalize_RGB_object(color);\n  };\n\n  /** - Convert an `RGB` or `RGBA` color to an `HSLA` object representation */\n  const RGB_to_HSLA = (color: string | rgbaT | rgbT): hslaT => {\n    const rgb = typeof color === 'string' ? RGB_string_to_object(color) : normalize_RGB_object(color),\n      r = rgb.r / 255,\n      g = rgb.g / 255,\n      b = rgb.b / 255,\n      a = rgb.a;\n\n    const max = Math.max(r, g, b),\n      min = Math.min(r, g, b);\n\n    let h = 0,\n      s,\n      l = (max + min) / 2;\n\n    if (max === min) {\n      h = s = 0;\n    } else {\n      const d = max - min;\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n      if (max === r) {\n        h = (g - b) / d + (g < b ? 6 : 0);\n      } else if (max === g) {\n        h = (b - r) / d + 2;\n      } else if (max === b) {\n        h = (r - g) / d + 4;\n      }\n\n      h /= 6;\n    }\n\n    h = clampHue(h * 360);\n    s = clamp100(s * 100);\n    l = clamp100(l * 100);\n\n    return { h, s, l, a: clampAlpha(a) };\n  };\n\n  /** - Convert `RGB` or `RGBA` color to an `HSVA` object representation */\n  const RGB_to_HSVA = (color: string | rgbaT | rgbT): hsvaT => {\n    const rgb = typeof color === 'string' ? RGB_string_to_object(color) : normalize_RGB_object(color),\n      r = rgb.r / 255,\n      g = rgb.g / 255,\n      b = rgb.b / 255,\n      a = rgb.a;\n\n    const max = Math.max(r, g, b),\n      min = Math.min(r, g, b),\n      d = max - min,\n      v = max,\n      s = max === 0 ? 0 : d / max;\n\n    let h = 0;\n\n    if (max === min) {\n      h = 0;\n    } else {\n      if (max === r) {\n        h = (g - b) / d + (g < b ? 6 : 0);\n      } else if (max === g) {\n        h = (b - r) / d + 2;\n      } else if (max === b) {\n        h = (r - g) / d + 4;\n      }\n\n      h = h / 6;\n    }\n\n    return {\n      h: clampHue(h * 360),\n      s: clamp100(s * 100),\n      v: clamp100(v * 100),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `RGB` or `RGBA` color to an `HWBA` object representation */\n  const RGB_to_HWBA = (color: string | rgbaT | rgbT): hwbaT => {\n    const rgb = typeof color === 'string' ? RGB_string_to_object(color) : normalize_RGB_object(color),\n      red = rgb.r / 255,\n      green = rgb.g / 255,\n      blue = rgb.b / 255,\n      a = rgb.a;\n\n    const { h } = RGB_to_HSLA(color);\n\n    const white = Math.min(red, green, blue) * 100;\n    const black = (1 - Math.max(red, green, blue)) * 100;\n\n    return {\n      h: clampHue(h),\n      w: clamp100(white),\n      b: clamp100(black),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Return the `RGB` color as a string, an array, or an object */\n  const RGB_types = ({ r, g, b, a }: rgbaT): ColorTypes<rgbaT> => {\n    return {\n      string: (forceAlpha?: boolean) => {\n        r = Math.round(r);\n        g = Math.round(g);\n        b = Math.round(b);\n\n        // auto\n        if (typeof forceAlpha === 'undefined') {\n          if (typeof a === 'number' && a !== 1) return `rgba(${r}, ${g}, ${b}, ${a})`;\n          return `rgb(${r}, ${g}, ${b})`;\n        }\n\n        if (forceAlpha) return `rgba(${r}, ${g}, ${b}, ${a ?? 1})`;\n\n        return `rgb(${r}, ${g}, ${b})`;\n      },\n      array: (roundValues = true) => {\n        if (roundValues) {\n          r = Math.round(r);\n          g = Math.round(g);\n          b = Math.round(b);\n        }\n        return [r, g, b, a];\n      },\n      object: (roundValues = true) => {\n        if (roundValues) {\n          r = Math.round(r);\n          g = Math.round(g);\n          b = Math.round(b);\n        }\n        return { r, g, b, a };\n      },\n    };\n  };\n\n  // * HSL -------------------------------------------------------------\n\n  /** - Parse `HSL` or `HSLA` color string to an `object` */\n  const HSL_string_to_object = (color: string): hslaT => {\n    color = color.trim().toLowerCase();\n    const colorType = detectColorFormat(color);\n\n    if (!colorType || !colorType.includes('hsl')) {\n      console.error(\n        '[colorKit.getHslObject] is unable to parse the string into an `HSL` object. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, s: 0, l: 0, a: 1 };\n    }\n\n    let matches: RegExpMatchArray | null = null;\n    const entry = COLORS_REGEX[colorType as 'hsl' | 'hsla'];\n    if (Array.isArray(entry)) {\n      for (let i = 0; i < entry.length; i++) {\n        if (entry[i].test(color)) matches = color.match(entry[i]);\n      }\n    } else {\n      matches = color.match(entry);\n    }\n\n    if (!matches || matches.length < 3) {\n      console.error(\n        '[colorKit.getHslObject] An error occurred while attempting to destructuring `HSL` values from the given string. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, s: 0, l: 0, a: 1 };\n    }\n\n    const h = parseInt(matches[1], 10),\n      s = parseInt(matches[2], 10),\n      l = parseInt(matches[3], 10),\n      a = parseFloat(matches[4] ?? '1');\n\n    return {\n      h: clampHue(h),\n      s: clamp100(s),\n      l: clamp100(l),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Ensure that the `HSL` object values are within the correct range and that it has the alpha channel */\n  const normalize_HSL_object = (color: hslaT | hslT): hslaT => {\n    return {\n      h: clampHue(color.h),\n      s: clamp100(color.s),\n      l: clamp100(color.l),\n      a: clampAlpha((color as hslaT).a ?? 1),\n    };\n  };\n\n  /** - Convert `HSL` or `HSLA` color to an `RGBA` object representation */\n  const HSL_to_RGBA = (color: string | hslaT | hslT): rgbaT => {\n    const hsla = typeof color === 'string' ? HSL_string_to_object(color) : normalize_HSL_object(color);\n\n    const h = hsla.h / 360,\n      s = hsla.s / 100,\n      l = hsla.l / 100,\n      a = hsla.a;\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s,\n      p = 2 * l - q;\n\n    const r = calculateHueValue(p, q, h + 1 / 3),\n      g = calculateHueValue(p, q, h),\n      b = calculateHueValue(p, q, h - 1 / 3);\n\n    return {\n      r: clampRGB(r * 255),\n      g: clampRGB(g * 255),\n      b: clampRGB(b * 255),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HSL` or `HSLA` color to `HEX` color */\n  const HSL_to_HEX = (color: string | hslaT | hslT): string => {\n    const hsla = typeof color === 'string' ? HSL_string_to_object(color) : normalize_HSL_object(color);\n    const rgb = HSL_to_RGBA(hsla);\n\n    const r = numberToHexString(rgb.r),\n      g = numberToHexString(rgb.g),\n      b = numberToHexString(rgb.b),\n      a = rgb.a === 1 ? '' : numberToHexString(rgb.a * 255);\n\n    return `#${r + g + b + a}`;\n  };\n\n  /** - Convert `HSL` or `HSLA` color to an `HSVA` object representation */\n  const HSL_to_HSVA = (color: string | hslaT | hslT): hsvaT => {\n    const hsla = typeof color === 'string' ? HSL_string_to_object(color) : normalize_HSL_object(color);\n    const h = hsla.h;\n\n    const s = hsla.s / 100,\n      l = hsla.l / 100,\n      a = (hsla as hslaT).a ?? 1,\n      v = l + s * Math.min(l, 1 - l),\n      sNew = v === 0 ? 0 : 2 - (2 * l) / v;\n\n    return {\n      h: clampHue(h),\n      s: clamp100(sNew * 100),\n      v: clamp100(v * 100),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HSL` or `HSLA` color to an `HWBA` object representation */\n  const HSL_to_HWBA = (color: string | hslaT | hslT): hwbaT => {\n    const hsva = HSL_to_HSVA(color);\n    return HSV_to_HWBA(hsva);\n  };\n\n  /** - Convert `HSL` or `HSLA` color to an `HSLA` object representation */\n  const HSL_to_HSL = (color: string | hslaT | hslT): hslaT => {\n    return typeof color === 'string' ? HSL_string_to_object(color) : normalize_HSL_object(color);\n  };\n\n  /** - Return the `HSL` color as a string, an array, or an object */\n  const HSL_types = ({ h, s, l, a }: hslaT): ColorTypes<hslaT> => {\n    return {\n      string: (forceAlpha?: boolean) => {\n        h = Math.round(h);\n        s = Math.round(s);\n        l = Math.round(l);\n\n        // auto\n        if (typeof forceAlpha === 'undefined') {\n          if (typeof a === 'number' && a !== 1) return `hsla(${h}, ${s}%, ${l}%, ${a})`;\n          return `hsl(${h}, ${s}%, ${l}%)`;\n        }\n\n        if (forceAlpha) return `hsla(${h}, ${s}%, ${l}%, ${a ?? 1})`;\n\n        return `hsl(${h}, ${s}%, ${l}%)`;\n      },\n      array: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          s = Math.round(s);\n          l = Math.round(l);\n        }\n        return [h, s, l, a];\n      },\n      object: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          s = Math.round(s);\n          l = Math.round(l);\n        }\n        return { h, s, l, a };\n      },\n    };\n  };\n\n  // * HWB -------------------------------------------------------------\n\n  /** - Parse `HWB` or `HWBA` color strong to an `object` */\n  const HWB_string_to_object = (color: string): hwbaT => {\n    color = color.trim().toLowerCase();\n    const colorType = detectColorFormat(color);\n\n    if (!colorType || !colorType.includes('hwb')) {\n      console.error(\n        '[colorKit.getHwbObject] is unable to parse the string into an `HWB` object. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, w: 0, b: 0, a: 1 };\n    }\n\n    let matches: RegExpMatchArray | null = null;\n    const entry = COLORS_REGEX[colorType as 'hwb' | 'hwba'];\n    if (Array.isArray(entry)) {\n      for (let i = 0; i < entry.length; i++) {\n        if (entry[i].test(color)) matches = color.match(entry[i]);\n      }\n    } else {\n      matches = color.match(entry);\n    }\n\n    if (!matches || matches.length < 4) {\n      console.error(\n        '[colorKit.getHwbObject] An error occurred while attempting to destructuring `HWB` values from the given string. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, w: 0, b: 0, a: 1 };\n    }\n\n    const h = parseInt(matches[1], 10),\n      w = parseInt(matches[2], 10),\n      b = parseInt(matches[3], 10),\n      a = parseFloat(matches[4] ?? '1');\n\n    return {\n      h: clampHue(h),\n      w: clamp100(w),\n      b: clamp100(b),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Ensure that the `HWB` object values are within the correct range and that it has the alpha channel */\n  const normalize_HWB_object = (color: hwbaT | hwbT): hwbaT => {\n    return {\n      h: clampHue(color.h),\n      w: clamp100(color.w),\n      b: clamp100(color.b),\n      a: clampAlpha((color as hwbaT).a ?? 1),\n    };\n  };\n\n  /** - Convert `HWB` or `HWBA` color to an `RGBA` object representation */\n  const HWB_to_RGBA = (color: hwbaT | hwbT | string): rgbaT => {\n    const hwba = typeof color === 'string' ? HWB_string_to_object(color) : normalize_HWB_object(color);\n\n    const h = hwba.h / 360,\n      w = hwba.w / 100,\n      b = hwba.b / 100,\n      a = hwba.a;\n\n    if (w + b >= 1) {\n      const gray = clampRGB((w * 255) / (w + b));\n      return {\n        r: gray,\n        g: gray,\n        b: gray,\n        a,\n      };\n    }\n\n    const red = calculateHueValue(0, 1, h + 1 / 3) * (1 - w - b) + w,\n      green = calculateHueValue(0, 1, h) * (1 - w - b) + w,\n      blue = calculateHueValue(0, 1, h - 1 / 3) * (1 - w - b) + w;\n\n    return {\n      r: clampRGB(red * 255),\n      g: clampRGB(green * 255),\n      b: clampRGB(blue * 255),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HWB` or `HWBA` color to an `Hex` color */\n  const HWB_to_HEX = (color: hwbaT | hwbT | string): string => {\n    const rgba = HWB_to_RGBA(color);\n    return RGB_to_HEX(rgba);\n  };\n\n  /** - Convert `HWB` or `HWBA` color to an `HSVA` object representation */\n  function HWB_to_HSVA(color: hwbaT | hwbT | string): hsvaT {\n    const hwba = typeof color === 'string' ? HWB_string_to_object(color) : normalize_HWB_object(color);\n\n    const h = hwba.h % 360,\n      w = hwba.w / 100,\n      b = hwba.b / 100,\n      a = hwba.a;\n\n    const v = (1 - b) * 100;\n    let s = (1 - w / (v / 100)) * 100;\n    s = isNaN(s) ? 0 : s;\n\n    return {\n      h: clampHue(h),\n      s: clamp100(s),\n      v: clamp100(v),\n      a: clampAlpha(a),\n    };\n  }\n\n  /** - Convert `HWB` or `HWBA` color to an `HSLA` object representation */\n  const HWB_to_HSLA = (color: hwbaT | hwbT | string): hslaT => {\n    const hsva = HWB_to_HSVA(color);\n    return HSV_to_HSLA(hsva);\n  };\n\n  /** - Convert `HWB` or `HWBA` color to an `HWBA` object representation */\n  const HWB_to_HWB = (color: hwbaT | hwbT | string): hwbaT => {\n    return typeof color === 'string' ? HWB_string_to_object(color) : normalize_HWB_object(color);\n  };\n\n  /** - Return the `HWB` color as a string, an array, or an object */\n  const HWB_types = ({ h, w, b, a }: hwbaT): ColorTypes<hwbaT> => {\n    return {\n      string: (forceAlpha?: boolean) => {\n        h = Math.round(h);\n        w = Math.round(w);\n        b = Math.round(b);\n\n        // auto\n        if (typeof forceAlpha === 'undefined') {\n          if (typeof a === 'number' && a !== 1) return `hwba(${h}, ${w}%, ${b}%, ${a})`;\n          return `hwb(${h}, ${w}%, ${b}%)`;\n        }\n\n        if (forceAlpha) return `hwba(${h}, ${w}%, ${b}%, ${a ?? 1})`;\n\n        return `hwb(${h}, ${w}%, ${b}%)`;\n      },\n      array: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          w = Math.round(w);\n          b = Math.round(b);\n        }\n        return [h, w, b, a];\n      },\n      object: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          w = Math.round(w);\n          b = Math.round(b);\n        }\n        return { h, w, b, a };\n      },\n    };\n  };\n\n  // * HSV -------------------------------------------------------------\n\n  /** - Parse `HSV` or `HSVA` color string to an `object` */\n  const HSV_string_to_object = (color: string): hsvaT => {\n    color = color.trim().toLowerCase();\n    const colorType = detectColorFormat(color);\n\n    if (!colorType || !colorType.includes('hsv')) {\n      console.error(\n        '[colorKit.getHsvObject] is unable to parse the string into an `HSV` object. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, s: 0, v: 0, a: 1 };\n    }\n\n    let matches: RegExpMatchArray | null = null;\n    const entry = COLORS_REGEX[colorType as 'hsv' | 'hsva'];\n    if (Array.isArray(entry)) {\n      for (let i = 0; i < entry.length; i++) {\n        if (entry[i].test(color)) matches = color.match(entry[i]);\n      }\n    } else {\n      matches = color.match(entry);\n    }\n\n    if (!matches || matches.length < 4) {\n      console.error(\n        '[colorKit.getHsvObject] An error occurred while attempting to destructuring `HSV` values from the given string. As a result, the color \"black\" will be returned instead.',\n      );\n      return { h: 0, s: 0, v: 0, a: 1 };\n    }\n\n    const h = parseInt(matches[1], 10),\n      s = parseInt(matches[2], 10),\n      v = parseInt(matches[3], 10),\n      a = parseFloat(matches[4] ?? '1');\n\n    return {\n      h: clampHue(h),\n      s: clamp100(s),\n      v: clamp100(v),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Ensure that the `HSV` object values are within the correct range and that it has the alpha channel */\n  const normalize_HSV_object = (color: hsvaT | hsvT): hsvaT => {\n    return {\n      h: clampHue(color.h),\n      s: clamp100(color.s),\n      v: clamp100(color.v),\n      a: clampAlpha((color as hsvaT).a ?? 1),\n    };\n  };\n\n  /** - Convert `HSV` color to an `RGBA` object representation */\n  const HSV_to_RGBA = (color: hsvaT | hsvT | string): rgbaT => {\n    const hsva = typeof color === 'string' ? HSV_string_to_object(color) : normalize_HSV_object(color);\n\n    const h = hsva.h / 360,\n      s = hsva.s / 100,\n      v = hsva.v / 100,\n      a = hsva.a;\n\n    const i = Math.floor(h * 6),\n      f = h * 6 - i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s);\n\n    let r = 0,\n      g = 0,\n      b = 0;\n\n    if (i % 6 === 0) {\n      r = v;\n      g = t;\n      b = p;\n    } else if (i % 6 === 1) {\n      r = q;\n      g = v;\n      b = p;\n    } else if (i % 6 === 2) {\n      r = p;\n      g = v;\n      b = t;\n    } else if (i % 6 === 3) {\n      r = p;\n      g = q;\n      b = v;\n    } else if (i % 6 === 4) {\n      r = t;\n      g = p;\n      b = v;\n    } else if (i % 6 === 5) {\n      r = v;\n      g = p;\n      b = q;\n    }\n\n    return {\n      r: clampRGB(r * 255),\n      g: clampRGB(g * 255),\n      b: clampRGB(b * 255),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HSV` color to an `HSLA` object representation */\n  const HSV_to_HSLA = (color: hsvaT | hsvT | string): hslaT => {\n    const hsva = typeof color === 'string' ? HSV_string_to_object(color) : normalize_HSV_object(color);\n\n    const h = hsva.h,\n      s = hsva.s / 100,\n      v = hsva.v / 100,\n      a = hsva.a;\n\n    const l = ((2 - s) * v) / 2,\n      sl = s * v,\n      sln = l !== 0 && l !== 1 ? sl / (l < 0.5 ? l * 2 : 2 - l * 2) : sl;\n\n    return {\n      h: clampHue(h),\n      s: clamp100(sln * 100),\n      l: clamp100(l * 100),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HSV` color to an `Hex` color */\n  const HSV_to_HEX = (color: hsvaT | hsvT | string): string => {\n    const rgba = HSV_to_RGBA(color);\n    const hex = RGB_to_HEX(rgba);\n    return hex;\n  };\n\n  /** - Convert `HSV` color to an `HWBA` object representation */\n  const HSV_to_HWBA = (color: hsvaT | hsvT | string): hwbaT => {\n    const { h, s, v, a } = typeof color === 'string' ? HSV_string_to_object(color) : normalize_HSV_object(color);\n\n    const w = (1 - s / 100) * v,\n      b = (1 - v / 100) * 100;\n\n    return {\n      h: clampHue(h),\n      w: clamp100(w),\n      b: clamp100(b),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert `HSV` color to an `HSVA` object representation */\n  const HSV_to_HSV = (color: hsvaT | hsvT | string): hsvaT => {\n    return typeof color === 'string' ? HSV_string_to_object(color) : normalize_HSV_object(color);\n  };\n\n  /** - Return the `HSV` color as a string, an array, or an object */\n  const HSV_types = ({ h, s, v, a }: hsvaT): ColorTypes<hsvaT> => {\n    return {\n      string: (forceAlpha?: boolean) => {\n        h = Math.round(h);\n        s = Math.round(s);\n        v = Math.round(v);\n\n        // auto\n        if (typeof forceAlpha === 'undefined') {\n          if (typeof a === 'number' && a !== 1) return `hsva(${h}, ${s}%, ${v}%, ${a})`;\n          return `hsv(${h}, ${s}%, ${v}%)`;\n        }\n\n        if (forceAlpha) return `hsva(${h}, ${s}%, ${v}%, ${a ?? 1})`;\n\n        return `hsv(${h}, ${s}%, ${v}%)`;\n      },\n      array: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          s = Math.round(s);\n          v = Math.round(v);\n        }\n        return [h, s, v, a];\n      },\n      object: (roundValues = true) => {\n        if (roundValues) {\n          h = Math.round(h);\n          s = Math.round(s);\n          v = Math.round(v);\n        }\n        return { h, s, v, a };\n      },\n    };\n  };\n\n  // * HEX -------------------------------------------------------------\n\n  /** - Convert any `HEX` color to 8-digit `HEX` color (#rrggbbaa) */\n  const normalize_HEX = (color: string | number): string => {\n    if (typeof color === 'number') {\n      return '#' + color.toString(16).padStart(8, '0');\n    }\n\n    color = color.trim().toLowerCase();\n    const colorType = detectColorFormat(color);\n\n    if (!colorType || !colorType.includes('hex')) {\n      console.error(\n        '[colorKit.normalizeHexColor] is unable to normalize the `HEX` string provided. As a result, the color \"black\" will be returned instead.',\n      );\n      return '#000000ff';\n    }\n\n    const hex = color.replace(/^#/, '').split('');\n\n    if (hex.length === 3) return `#${hex.map(x => x + x).join('')}ff`;\n    if (hex.length === 4) return `#${hex.map(x => x + x).join('')}`;\n    if (hex.length === 6) return `#${hex.join('')}ff`;\n\n    return color;\n  };\n\n  /** - Convert any `HEX` color to an `RGBA` object representation */\n  const HEX_to_RGBA = (color: string | number): rgbaT => {\n    const hex = normalize_HEX(color);\n\n    let matches: RegExpMatchArray | null = null;\n    const entry = COLORS_REGEX.hex8;\n    if (Array.isArray(entry)) {\n      for (let i = 0; i < entry.length; i++) {\n        if (entry[i].test(hex)) matches = hex.match(entry[i]);\n      }\n    } else {\n      matches = hex.match(entry);\n    }\n\n    if (!matches || matches.length < 4) {\n      console.error(\n        '[colorKit.HEX_RGBA] An error occurred while attempting to destructuring `HEX` values from the given string. As a result, the color \"black\" will be returned instead.',\n      );\n      return { r: 0, g: 0, b: 0, a: 1 };\n    }\n\n    const r = parseInt(matches[1], 16),\n      g = parseInt(matches[2], 16),\n      b = parseInt(matches[3], 16),\n      a = parseInt(matches[4], 16) / 255;\n\n    return {\n      r: clampRGB(r),\n      g: clampRGB(g),\n      b: clampRGB(b),\n      a: clampAlpha(a),\n    };\n  };\n\n  /** - Convert any `HEX` color to an `HSVA` object representation */\n  const HEX_to_HSVA = (color: string | number): hsvaT => {\n    const rgb = HEX_to_RGBA(color);\n    const hsva = RGB_to_HSVA(rgb);\n    return hsva;\n  };\n\n  /** - Convert any `HEX` color to an `HSLA` object representation */\n  const HEX_to_HSLA = (color: string): hslaT => {\n    const rgb = HEX_to_RGBA(color);\n    return RGB_to_HSLA(rgb);\n  };\n\n  /** - Convert any `HEX` color to an `HWBA` object representation */\n  const HEX_to_HWBA = (color: string): hwbaT => {\n    const rgba = HEX_to_RGBA(color);\n    return RGB_to_HWBA(rgba);\n  };\n\n  // * Color conversions -------------------------------------------------------------\n\n  /** - Convert `HSL`, `HSV`, `HWB`, or `RGB` color to the `HEX` color format. */\n  const HEX = (color: SupportedColorFormats): string => {\n    // named color\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n\n      if (NAMED_COLORS.hasOwnProperty(color)) {\n        color = NAMED_COLORS[color as keyof typeof NAMED_COLORS] as string;\n      }\n    }\n\n    const colorType = detectColorFormat(color);\n\n    // RGB to HEX\n    if (colorType === 'rgb' || colorType === 'rgba') {\n      return RGB_to_HEX(color as string | rgbT | rgbaT);\n    }\n\n    // HSL to HEX\n    if (colorType === 'hsl' || colorType === 'hsla') {\n      return HSL_to_HEX(color as string | hslaT | hslT);\n    }\n\n    // HSV to HEX\n    if (colorType === 'hsv' || colorType === 'hsva') {\n      return HSV_to_HEX(color as string | hsvaT | hsvT);\n    }\n\n    // HWB to HEX\n    if (colorType === 'hwb' || colorType === 'hwba') {\n      return HWB_to_HEX(color as string | hwbaT | hwbT);\n    }\n\n    // HEX\n    if (colorType?.includes('hex')) {\n      return normalize_HEX(color as string | number);\n    }\n\n    // ! error\n    console.error(\n      '[colorKit.HEX] An error occurred while attempting to convert the provided parameter into an `HEX` color. As a result, the default color \"black\" will be used instead.',\n    );\n\n    return '#000000';\n  };\n\n  /** - Convert `HSL`, `HSV`, `HWB`, or `HEX` color to the `RGB` color format. */\n  const RGB = (color: SupportedColorFormats): ColorTypes<rgbaT> => {\n    // named color\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n\n      if (NAMED_COLORS.hasOwnProperty(color)) {\n        color = NAMED_COLORS[color as keyof typeof NAMED_COLORS] as string;\n      }\n    }\n\n    const colorType = detectColorFormat(color);\n\n    // HEX to RGB\n    if (colorType?.includes('hex')) {\n      const rgb = HEX_to_RGBA(color as string | number);\n      return RGB_types(rgb);\n    }\n\n    // HSL to RGB\n    if (colorType === 'hsl' || colorType === 'hsla') {\n      const rgb = HSL_to_RGBA(color as string | hslaT | hslT);\n      return RGB_types(rgb);\n    }\n\n    // HSV to RGB\n    if (colorType === 'hsv' || colorType === 'hsva') {\n      const rgb = HSV_to_RGBA(color as string | hsvaT | hsvT);\n      return RGB_types(rgb);\n    }\n\n    // HWB to RGB\n    if (colorType === 'hwb' || colorType === 'hwba') {\n      const rgb = HWB_to_RGBA(color as string | hwbaT | hwbT);\n      return RGB_types(rgb);\n    }\n\n    // RGB to normalized RGB\n    if (colorType === 'rgb' || colorType === 'rgba') {\n      const rgba = RGB_to_RGB(color as string | rgbaT | rgbT);\n      return RGB_types(rgba);\n    }\n\n    // ! error\n    console.error(\n      '[colorKit.RGB] An error occurred while attempting to convert the provided parameter into an `RGB` color. As a result, the default color \"black\" will be used instead.',\n    );\n\n    return RGB_types({ r: 0, g: 0, b: 0, a: 1 });\n  };\n\n  /** - Convert `HEX`, `HSV`, `HWB`, or `RGB` color to the `HSL` color format. */\n  const HSL = (color: SupportedColorFormats): ColorTypes<hslaT> => {\n    // named color\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n\n      if (NAMED_COLORS.hasOwnProperty(color)) {\n        color = NAMED_COLORS[color as keyof typeof NAMED_COLORS] as string;\n      }\n    }\n\n    const colorType = detectColorFormat(color);\n\n    // HEX to HSL\n    if (colorType?.includes('hex')) {\n      const hsla = HEX_to_HSLA(color as string);\n      return HSL_types(hsla);\n    }\n\n    // RGB to HSL\n    if (colorType === 'rgb' || colorType === 'rgba') {\n      const hsla = RGB_to_HSLA(color as string | rgbaT | rgbT);\n      return HSL_types(hsla);\n    }\n\n    // HSV to HSL\n    if (colorType === 'hsv' || colorType === 'hsva') {\n      const hsla = HSV_to_HSLA(color as string | hsvaT | hsvT);\n      return HSL_types(hsla);\n    }\n\n    // HWB to HSL\n    if (colorType === 'hwb' || colorType === 'hwba') {\n      const hsla = HWB_to_HSLA(color as string | hwbaT | hwbT);\n      return HSL_types(hsla);\n    }\n\n    // HSL to normalized HSL\n    if (colorType === 'hsl' || colorType === 'hsla') {\n      const hsla = HSL_to_HSL(color as string | hslaT | hslT);\n      return HSL_types(hsla);\n    }\n\n    // ! error\n    console.error(\n      '[colorKit.HSL] An error occurred while attempting to convert the provided parameter into an `HSL` color. As a result, the default color \"black\" will be used instead.',\n    );\n\n    return HSL_types({ h: 0, s: 0, l: 0, a: 1 });\n  };\n\n  /** - Convert `HSL`, `HEX`, `HSV`, or `RGB` color to the `HWB` color format. */\n  const HWB = (color: SupportedColorFormats): ColorTypes<hwbaT> => {\n    // named color\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n\n      if (NAMED_COLORS.hasOwnProperty(color)) {\n        color = NAMED_COLORS[color as keyof typeof NAMED_COLORS] as string;\n      }\n    }\n\n    const colorType = detectColorFormat(color);\n\n    // HEX to HWB\n    if (colorType?.includes('hex')) {\n      const hwba = HEX_to_HWBA(color as string);\n      return HWB_types(hwba);\n    }\n\n    // RGB to HWB\n    if (colorType === 'rgb' || colorType === 'rgba') {\n      const hwba = RGB_to_HWBA(color as string | rgbaT | rgbT);\n      return HWB_types(hwba);\n    }\n\n    // HSL to HWB\n    if (colorType === 'hsl' || colorType === 'hsla') {\n      const hwba = HSL_to_HWBA(color as string | hslaT | hslT);\n      return HWB_types(hwba);\n    }\n\n    // HSV to HWB\n    if (colorType === 'hsv' || colorType === 'hsva') {\n      const hwba = HSV_to_HWBA(color as string | hsvaT | hsvT);\n      return HWB_types(hwba);\n    }\n\n    // HWB to normalized HWB\n    if (colorType === 'hwb' || colorType === 'hwba') {\n      const hwba = HWB_to_HWB(color as string | hwbaT | hwbT);\n      return HWB_types(hwba);\n    }\n\n    // ! error\n    console.error(\n      '[colorKit.HWB] An error occurred while attempting to convert the provided parameter into an `HWB` color. As a result, the default color \"black\" will be used instead.',\n    );\n\n    return HWB_types({ h: 0, w: 0, b: 100, a: 1 });\n  };\n\n  /** - Convert `HSL`, `HEX`, `HWB`, or `RGB` color to the `HSV` color format. */\n  const HSV = (color: SupportedColorFormats): ColorTypes<hsvaT> => {\n    // named color\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n\n      if (NAMED_COLORS.hasOwnProperty(color)) {\n        color = NAMED_COLORS[color as keyof typeof NAMED_COLORS] as string;\n      }\n    }\n\n    const colorType = detectColorFormat(color);\n\n    // HEX to HSV\n    if (colorType?.includes('hex')) {\n      const hsva = HEX_to_HSVA(color as string);\n      return HSV_types(hsva);\n    }\n\n    // RGB to HSV\n    if (colorType === 'rgb' || colorType === 'rgba') {\n      const hsva = RGB_to_HSVA(color as string | rgbaT | rgbT);\n      return HSV_types(hsva);\n    }\n\n    // HSL to HSV\n    if (colorType === 'hsl' || colorType === 'hsla') {\n      const hsva = HSL_to_HSVA(color as string | hslaT | hslT);\n      return HSV_types(hsva);\n    }\n\n    // HWB to HSV\n    if (colorType === 'hwb' || colorType === 'hwba') {\n      const hsva = HWB_to_HSVA(color as string | hwbaT | hwbT);\n      return HSV_types(hsva);\n    }\n\n    // HSV to normalized HSV\n    if (colorType === 'hsv' || colorType === 'hsva') {\n      const hsva = HSV_to_HSV(color as string | hsvaT | hsvT);\n      return HSV_types(hsva);\n    }\n\n    // ! error\n    console.error(\n      '[colorKit.HSV] An error occurred while attempting to convert the provided parameter into an `HSV` color. As a result, the default color \"black\" will be used instead.',\n    );\n\n    return HSV_types({ h: 0, s: 0, v: 0, a: 1 });\n  };\n\n  // * Color Information -------------------------------------------------------------\n\n  /** - Identify the color format of a given `string` or `object`, and return `null` for invalid colors. */\n  const getFormat = (color: SupportedColorFormats): ColorFormats | 'named' | null => {\n    // color int\n    if (typeof color === 'number') {\n      if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) return 'hex8';\n      return null;\n    }\n\n    // color string\n    if (typeof color === 'string') {\n      color = color.trim().toLowerCase();\n      if (NAMED_COLORS.hasOwnProperty(color)) return 'named';\n\n      for (const key in COLORS_REGEX) {\n        const format = key as ColorFormats;\n        const entry = COLORS_REGEX[format];\n        if (Array.isArray(entry)) {\n          for (let i = 0; i < entry.length; i++) if (entry[i].test(color)) return format;\n          continue;\n        }\n        if (entry.test(color)) return format;\n      }\n    }\n\n    // color object\n    if (typeof color === 'object') {\n      const rgbaKeys = ['r', 'g', 'b', 'a'] as (keyof rgbaT)[];\n      const isRgbaOb = rgbaKeys.every(k => color.hasOwnProperty(k) && typeof (color as rgbaT)[k] === 'number');\n      if (isRgbaOb) return 'rgba';\n\n      const rgbKeys = ['r', 'g', 'b'] as (keyof rgbT)[];\n      const isRgbOb = rgbKeys.every(k => color.hasOwnProperty(k) && typeof (color as rgbT)[k] === 'number');\n      if (isRgbOb) return 'rgb';\n\n      const hslaKeys = ['h', 's', 'l', 'a'] as (keyof hslaT)[];\n      const isHslaOb = hslaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hslaT)[k] === 'number');\n      if (isHslaOb) return 'hsla';\n\n      const hslKeys = ['h', 's', 'l'] as (keyof hslT)[];\n      const isHslOb = hslKeys.every(k => color.hasOwnProperty(k) && typeof (color as hslT)[k] === 'number');\n      if (isHslOb) return 'hsl';\n\n      const hsvaKeys = ['h', 's', 'v', 'a'] as (keyof hsvaT)[];\n      const isHsvaOb = hsvaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hsvaT)[k] === 'number');\n      if (isHsvaOb) return 'hsva';\n\n      const hsvKeys = ['h', 's', 'v'] as (keyof hsvT)[];\n      const isHsvOb = hsvKeys.every(k => color.hasOwnProperty(k) && typeof (color as hsvT)[k] === 'number');\n      if (isHsvOb) return 'hsv';\n\n      const hwbaKeys = ['h', 'w', 'b', 'a'] as (keyof hwbaT)[];\n      const isHwbaOb = hwbaKeys.every(k => color.hasOwnProperty(k) && typeof (color as hwbaT)[k] === 'number');\n      if (isHwbaOb) return 'hwba';\n\n      const hwbKeys = ['h', 'w', 'b'] as (keyof hwbT)[];\n      const isHwbOb = hwbKeys.every(k => color.hasOwnProperty(k) && typeof (color as hwbT)[k] === 'number');\n      if (isHwbOb) return 'hwb';\n    }\n\n    return null;\n  };\n\n  /** - Get the `red` channel value of a given color. */\n  const getRed = (color: SupportedColorFormats): number => {\n    const { r } = RGB(color).object();\n    return r;\n  };\n\n  /** - Get the `green` channel value of a given color. */\n  const getGreen = (color: SupportedColorFormats): number => {\n    const { g } = RGB(color).object();\n    return g;\n  };\n\n  /** - Get the `blue` channel value of a given color. */\n  const getBlue = (color: SupportedColorFormats): number => {\n    const { b } = RGB(color).object();\n    return b;\n  };\n\n  /** - Get the `hue` channel value of a given color. */\n  const getHue = (color: SupportedColorFormats): number => {\n    const { h } = HSL(color).object();\n    return h;\n  };\n\n  /** - Get the `saturation` value of a given color. */\n  const getSaturation = (color: SupportedColorFormats): number => {\n    const { s } = HSL(color).object();\n    return s;\n  };\n\n  /**\n   * - Get color's HSL `luminosity` channel value.\n   * - If you want the overall `luminosity` of a color use `getLuminanceWCAG` method.\n   */\n  const getLuminance = (color: SupportedColorFormats): number => {\n    const { l } = HSL(color).object();\n    return l;\n  };\n\n  /** - Get the HSV's `value` (brightness) channel value of a given color. */\n  const getBrightness = (color: SupportedColorFormats): number => {\n    const { v } = HSV(color).object();\n    return v;\n  };\n\n  /** - Returns the perceived `luminance` of a color, from `0-1` as defined by Web Content Accessibility Guidelines (Version 2.0). */\n  const getLuminanceWCAG = (color: SupportedColorFormats): number => {\n    const { r, g, b } = RGB(color).object(false);\n    const a = [r, g, b].map(v => (v / 255 <= 0.03928 ? v / 255 / 12.92 : Math.pow((v / 255 + 0.055) / 1.055, 2.4)));\n    return a[0] * 0.2126 + a[1] * 0.7152 + a[2] * 0.0722;\n  };\n\n  /** - Returns a boolean indicating whether the color is considered \"dark\" or not */\n  const isDark = (color: SupportedColorFormats): boolean => {\n    const luminance = getLuminanceWCAG(color);\n    return luminance < 0.5;\n  };\n\n  /** - Returns a boolean indicating whether the color is considered \"light\" or not */\n  const isLight = (color: SupportedColorFormats): boolean => {\n    const luminance = getLuminanceWCAG(color);\n    return luminance >= 0.5;\n  };\n\n  /**\n   * - Check if two colors are similar within a specified tolerance.\n   *\n   * @example\n   *   const tolerance = 0;\n   *   const isEqual = colorKit.areColorsEqual('#f00', 'red', tolerance); // true\n   */\n  const areColorsEqual = (color1: SupportedColorFormats, color2: SupportedColorFormats, tolerance = 0): boolean => {\n    const rgb1 = RGB(color1).object();\n    const rgb2 = RGB(color2).object();\n\n    const deltaR = rgb1.r - rgb2.r;\n    const deltaG = rgb1.g - rgb2.g;\n    const deltaB = rgb1.b - rgb2.b;\n    const difference = Math.sqrt(deltaR * deltaR + deltaG * deltaG + deltaB * deltaB);\n\n    return difference <= tolerance;\n  };\n\n  /** - Calculates the contrast ratio between two colors, useful for ensuring accessibility and readability. */\n  const contrastRatio = (color1: SupportedColorFormats, color2: SupportedColorFormats): number => {\n    const luminance1 = getLuminanceWCAG(color1);\n    const luminance2 = getLuminanceWCAG(color2);\n    const contrast = (Math.max(luminance1, luminance2) + 0.05) / (Math.min(luminance1, luminance2) + 0.05);\n    return Math.round(contrast * 100) / 100;\n  };\n\n  // * Color Manipulation -------------------------------------------------------------\n\n  const returnColorObject = (color: SupportedColorFormats) => {\n    return {\n      hex() {\n        return HEX(color);\n      },\n      rgb() {\n        return RGB(color);\n      },\n      hsl() {\n        return HSL(color);\n      },\n      hsv() {\n        return HSV(color);\n      },\n      hwb() {\n        return HWB(color);\n      },\n    };\n  };\n\n  // * Red channel\n  /** Set the `red` value of a color to a specific amount. */\n  const setRed = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { g, b, a } = RGB(color).object();\n    const newR = clampRGB(amount);\n    const newColor = { r: newR, g, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Increase the `red` value of a color by the given percentage/amount.\n   *\n   * @example\n   *   increaseRed('rgb(100, 100, 100)', 20).hex();\n   *   increaseRed('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const increaseRed = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const red = typeof amount === 'string' ? r + r * (parseFloat(amount) / 100) : r + amount;\n    const newR = clampRGB(red);\n    const newColor = { r: newR, g, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Decrease the `red` value of a color by the given percentage/amount\n   *\n   * @example\n   *   decreaseRed('rgb(100, 100, 100)', 20).hex();\n   *   decreaseRed('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const decreaseRed = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const red = typeof amount === 'string' ? r - r * (parseFloat(amount) / 100) : r - amount;\n    const newR = clampRGB(red);\n    const newColor = { r: newR, g, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  // * Green channel\n  /** - Set the `green` value of a color to a specific amount. */\n  const setGreen = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { r, b, a } = RGB(color).object();\n    const newG = clampRGB(amount);\n    const newColor = { r, g: newG, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Increase the `green` value of a color by the given percentage.\n   *\n   * @example\n   *   increaseGreen('rgb(100, 100, 100)', 20).hex();\n   *   increaseGreen('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const increaseGreen = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const green = typeof amount === 'string' ? g + g * (parseFloat(amount) / 100) : g + amount;\n    const newG = clampRGB(green);\n    const newColor = { r, g: newG, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Decrease the `green` value of a color by the given percentage.\n   *\n   * @example\n   *   decreaseGreen('rgb(100, 100, 100)', 20).hex();\n   *   decreaseGreen('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const decreaseGreen = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const green = typeof amount === 'string' ? g - g * (parseFloat(amount) / 100) : g - amount;\n    const newG = clampRGB(green);\n    const newColor = { r, g: newG, b, a };\n\n    return returnColorObject(newColor);\n  };\n\n  // * Blue channel\n  /** - Set the `blue` value of a color to a specific amount. */\n  const setBlue = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { r, g, a } = RGB(color).object();\n    const newB = clampRGB(amount);\n    const newColor = { r, g, b: newB, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Increase the `blue` value of a color by the given percentage.\n   *\n   * @example\n   *   increaseBlue('rgb(100, 100, 100)', 20).hex();\n   *   increaseBlue('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const increaseBlue = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const blue = typeof amount === 'string' ? b + b * (parseFloat(amount) / 100) : b + amount;\n    const newB = clampRGB(blue);\n    const newColor = { r, g, b: newB, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Decrease the `blue` value of a color by the given percentage.\n   *\n   * @example\n   *   decreaseBlue('rgb(100, 100, 100)', 20).hex();\n   *   decreaseBlue('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const decreaseBlue = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const blue = typeof amount === 'string' ? b - b * (parseFloat(amount) / 100) : b - amount;\n    const newB = clampRGB(blue);\n    const newColor = { r, g, b: newB, a };\n\n    return returnColorObject(newColor);\n  };\n\n  //* Alpha channel\n  /** - Get the `alpha` value of a given color. */\n  const getAlpha = (color: SupportedColorFormats): number => {\n    const { a } = RGB(color).object();\n    return a;\n  };\n\n  /** - Set the `alpha` value of a color to a specific amount. */\n  const setAlpha = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { r, g, b } = RGB(color).object();\n    const newA = clampAlpha(amount);\n    const newColor = { r, g, b, a: newA };\n\n    return returnColorObject(newColor);\n  };\n\n  /** Increase the `alpha` value of a color by the given percentage. */\n  const increaseAlpha = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const alpha = typeof amount === 'string' ? a + a * (parseFloat(amount) / 100) : a + amount;\n    const newA = clampAlpha(alpha);\n    const newColor = { r, g, b, a: newA };\n\n    return returnColorObject(newColor);\n  };\n\n  /** Decrease the `alpha` value of a color by the given percentage. */\n  const decreaseAlpha = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const alpha = typeof amount === 'string' ? a - a * (parseFloat(amount) / 100) : a - amount;\n    const newA = clampAlpha(alpha);\n    const newColor = { r, g, b, a: newA };\n\n    return returnColorObject(newColor);\n  };\n\n  //* Hue\n  /** - Set the `hue` value of a color to a specific amount. */\n  const setHue = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { s, l, a } = HSL(color).object();\n    const newH = clampHue(amount);\n    const newColor = { h: newH, s, l, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Increase the `hue` value of a color by the given percentage/amount.\n   *\n   * @example\n   *   increaseHue('rgb(100, 100, 100)', 20).hex();\n   *   increaseHue('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const increaseHue = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const hue = typeof amount === 'string' ? h + h * (parseFloat(amount) / 100) : h + amount;\n    const newH = clampHue(hue);\n    const newColor = { h: newH, s, l, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * Decrease the `hue` value of a color by the given percentage/amount.\n   *\n   * @example\n   *   decreaseHue('rgb(100, 100, 100)', 20).hex();\n   *   decreaseHue('rgb(100, 100, 100)', '20%').rgb().string();\n   */\n  const decreaseHue = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const hue = typeof amount === 'string' ? h - h * (parseFloat(amount) / 100) : h - amount;\n    const newH = clampHue(hue);\n    const newColor = { h: newH, s, l, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * - Spin the `hue` channel by a certain percentage/amount.\n   *\n   * @example\n   *   spin('red', 20).hex();\n   *   spin('rgb(255, 0, 0)', '20%').rgb().string();\n   */\n  const spin = (color: SupportedColorFormats, degree: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const spinDegree = typeof degree === 'string' ? s * (parseFloat(degree) / 100) : degree;\n    const newColor = { h: Math.round((h + spinDegree) % 360), s, l, a };\n\n    return returnColorObject(newColor);\n  };\n\n  //* Saturation\n  /** - Set the `saturation` value of a color to a specific amount. */\n  const setSaturation = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { h, l, a } = HSL(color).object();\n    const newS = clamp100(amount);\n    const saturatedColor = { h, s: newS, l, a };\n\n    return returnColorObject(saturatedColor);\n  };\n\n  /**\n   * - Increase the saturation of the given color by a certain percentage/amount.\n   *\n   * @example\n   *   saturate('red', 20).hex();\n   *   saturate('rgb(255, 0, 0)', '20%').rgb().string();\n   */\n  const saturate = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const saturation = typeof amount === 'string' ? s + s * (parseFloat(amount) / 100) : s + amount;\n    const newS = clamp100(saturation);\n    const saturatedColor = { h, s: newS, l, a };\n\n    return returnColorObject(saturatedColor);\n  };\n\n  /**\n   * - Decrease the saturation of the given color by a certain percentage/amount.\n   *\n   * @example\n   *   saturate('red', 20).hex();\n   *   saturate('rgb(255, 0, 0)', '20%').rgb().string();\n   */\n  const desaturate = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const saturation = typeof amount === 'string' ? s - s * (parseFloat(amount) / 100) : s - amount;\n    const newS = clamp100(saturation);\n    const desaturatedColor = { h, s: newS, l, a };\n\n    return returnColorObject(desaturatedColor);\n  };\n\n  //* Brightness\n  /** - Set HSL's `luminosity` channel for a given color to a specific amount. */\n  const setLuminance = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { h, s, a } = HSL(color).object();\n    const newL = clamp100(amount);\n    const newColor = { h, s, l: newL, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /**\n   * - Increase the brightness of the given color by a certain percentage/amount.\n   *\n   * @example\n   *   brighten('red', 20).hex();\n   *   brighten('rgb(255, 0, 0)', '20%').rgb().string();\n   */\n  const brighten = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const lum = typeof amount === 'string' ? l + l * (parseFloat(amount) / 100) : l + amount;\n    const newL = clamp100(lum);\n    const brightenedColor = { h, s, l: newL, a };\n\n    return returnColorObject(brightenedColor);\n  };\n\n  /**\n   * - Decrease the brightness of the given color by a certain percentage/amount.\n   *\n   * @example\n   *   darken('red', 20).hex();\n   *   darken('rgb(255, 0, 0)', '20%').rgb().string();\n   */\n  const darken = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, l, a } = HSL(color).object();\n    const lum = typeof amount === 'string' ? l - l * (parseFloat(amount) / 100) : l - amount;\n    const newL = clamp100(lum);\n    const darkenedColor = { h, s, l: newL, a };\n\n    return returnColorObject(darkenedColor);\n  };\n\n  /** - Set HSV's `value` (brightness) channel for a given color to a specific amount. */\n  const setBrightness = (color: SupportedColorFormats, amount: number): ConversionMethods => {\n    const { h, s, a } = HSV(color).object();\n    const newV = clamp100(amount);\n    const newColor = { h, s, v: newV, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /** Increase HSV's `value` (brightness) channel value of a color by the given percentage/amount. */\n  const increaseBrightness = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, v, a } = HSV(color).object();\n    const value = typeof amount === 'string' ? v + v * (parseFloat(amount) / 100) : v + amount;\n    const newV = clamp100(value);\n    const newColor = { h, s, v: newV, a };\n\n    return returnColorObject(newColor);\n  };\n\n  /** Decrease HSV's `value` (brightness) channel value of a color by the given percentage/amount. */\n  const decreaseBrightness = (color: SupportedColorFormats, amount: number | string): ConversionMethods => {\n    const { h, s, v, a } = HSV(color).object();\n    const value = typeof amount === 'string' ? v - v * (parseFloat(amount) / 100) : v - amount;\n    const newV = clamp100(value);\n    const newColor = { h, s, v: newV, a };\n\n    return returnColorObject(newColor);\n  };\n\n  // * Color Utilities -------------------------------------------------------------\n\n  /**\n   * - Blends two colors by a certain amount.\n   *\n   * @example\n   *   blend('yellow', 'red', 50).hex(); // #ff8000\n   */\n  const blend = (color1: SupportedColorFormats, color2: SupportedColorFormats, percentage: number): ConversionMethods => {\n    percentage = percentage / 100;\n\n    const rgba1 = RGB(color1).object();\n    const rgba2 = RGB(color2).object();\n\n    const r = clampRGB(rgba1.r * (1 - percentage) + rgba2.r * percentage),\n      g = clampRGB(rgba1.g * (1 - percentage) + rgba2.g * percentage),\n      b = clampRGB(rgba1.b * (1 - percentage) + rgba2.b * percentage),\n      a = clampAlpha(rgba1.a * (1 - percentage) + rgba2.a * percentage);\n\n    const blendedColor = { r, g, b, a };\n\n    return returnColorObject(blendedColor);\n  };\n\n  /** - Invert (negate) a color, black becomes white, white becomes black, blue becomes orange and so on. */\n  const invert = (color: SupportedColorFormats): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const invertedColor = { r: 255 - r, g: 255 - g, b: 255 - b, a };\n    return returnColorObject(invertedColor);\n  };\n\n  /** - Completely desaturate a color into grayscale. */\n  const grayscale = (color: SupportedColorFormats): ConversionMethods => {\n    const { r, g, b, a } = RGB(color).object();\n    const gray = clampRGB(r * 0.3 + g * 0.59 + b * 0.11);\n    const grayColor = { r: gray, g: gray, b: gray, a };\n\n    return returnColorObject(grayColor);\n  };\n\n  /** - Generate a random color from `HSL` values. */\n  const randomHslColor = ({ h = [0, 360], s = [0, 100], l = [0, 100], a = [1, 1] } = {}): ConversionMethods => {\n    const random = {\n      h: clampHue(randomNumber(h[0], h[1])),\n      s: clamp100(randomNumber(s[0], s[1])),\n      l: clamp100(randomNumber(l[0], l[1])),\n      a: clampAlpha(randomNumber(a[0], a[1])),\n    };\n\n    return returnColorObject(random);\n  };\n\n  /** - Generate a random color from `HSV` values. */\n  const randomHsvColor = ({ h = [0, 360], s = [0, 100], v = [0, 100], a = [1, 1] } = {}): ConversionMethods => {\n    const random = {\n      h: clampHue(randomNumber(h[0], h[1])),\n      s: clamp100(randomNumber(s[0], s[1])),\n      v: clamp100(randomNumber(v[0], v[1])),\n      a: clampAlpha(randomNumber(a[0], a[1])),\n    };\n\n    return returnColorObject(random);\n  };\n\n  /** - Generate a random color from `RGB` values. */\n  const randomRgbColor = ({ r = [0, 255], g = [0, 255], b = [0, 255], a = [1, 1] } = {}): ConversionMethods => {\n    const random = {\n      r: clampRGB(randomNumber(r[0], r[1])),\n      g: clampRGB(randomNumber(g[0], g[1])),\n      b: clampRGB(randomNumber(b[0], b[1])),\n      a: clampAlpha(randomNumber(a[0], a[1])),\n    };\n\n    return returnColorObject(random);\n  };\n\n  /** - Generate a random color from `HWB` values. */\n  const randomHwbColor = ({ h = [0, 360], w = [0, 100], b = [0, 100], a = [1, 1] } = {}): ConversionMethods => {\n    const random = {\n      h: clampHue(randomNumber(h[0], h[1])),\n      w: clamp100(randomNumber(w[0], w[1])),\n      b: clamp100(randomNumber(b[0], b[1])),\n      a: clampAlpha(randomNumber(a[0], a[1])),\n    };\n\n    return returnColorObject(random);\n  };\n\n  /** - Returns the first color with the desired contrast ratio against the second color */\n  const adjustContrast = (color1: SupportedColorFormats, color2: SupportedColorFormats, ratio = 4.5): ConversionMethods => {\n    const contrast = contrastRatio(color1, color2);\n    const color1RGB = RGB(color1).object();\n    const channels = ['r', 'g', 'b'] as const;\n\n    function adjustLuminance(colorRGB: rgbaT, by: number) {\n      const r = clampRGB(colorRGB.r + by);\n      const g = clampRGB(colorRGB.g + by);\n      const b = clampRGB(colorRGB.b + by);\n      return { r, g, b, a: colorRGB.a };\n    }\n\n    let newColor = color1RGB;\n\n    //* increase contrast\n    if (ratio && contrast < ratio) {\n      while (contrastRatio(newColor, color2) < ratio) {\n        const adjustBy = isDark(color2) ? 1 : -1; // increase or decrease relative to the background color\n        newColor = adjustLuminance(newColor, adjustBy);\n\n        // break if the color reached the limit\n        if (channels.every(e => newColor[e] === 0)) break;\n        if (channels.every(e => newColor[e] === 255)) break;\n      }\n      //* decrease contrast\n    } else if (ratio && contrast > ratio) {\n      while (contrastRatio(newColor, color2) > ratio) {\n        const adjustBy = !isDark(color2) ? 1 : -1; // increase or decrease relative to the background color\n        newColor = adjustLuminance(newColor, adjustBy);\n\n        // break if the color reached the limit\n        if (channels.every(e => newColor[e] === 0)) break;\n        if (channels.every(e => newColor[e] === 255)) break;\n      }\n    }\n\n    return returnColorObject(newColor);\n  };\n\n  return {\n    // color conversion\n    HEX,\n    RGB,\n    HSL,\n    HWB,\n    HSV,\n    // color information\n    getFormat,\n    getRed,\n    getGreen,\n    getBlue,\n    getHue,\n    getSaturation,\n    getBrightness,\n    getLuminance,\n    getLuminanceWCAG,\n    isDark,\n    isLight,\n    areColorsEqual,\n    contrastRatio,\n\n    // color manipulation\n    setRed,\n    increaseRed,\n    decreaseRed,\n\n    setGreen,\n    increaseGreen,\n    decreaseGreen,\n\n    setBlue,\n    increaseBlue,\n    decreaseBlue,\n\n    getAlpha,\n    setAlpha,\n    increaseAlpha,\n    decreaseAlpha,\n\n    setHue,\n    increaseHue,\n    decreaseHue,\n    spin,\n\n    setSaturation,\n    saturate,\n    desaturate,\n\n    setLuminance,\n    brighten,\n    darken,\n    setBrightness,\n    increaseBrightness,\n    decreaseBrightness,\n\n    // color utilities\n    blend,\n    invert,\n    grayscale,\n    randomHslColor,\n    randomHsvColor,\n    randomRgbColor,\n    randomHwbColor,\n    adjustContrast,\n  };\n}\n\ntype ColorKit = ReturnType<typeof colorKitUI> & {\n  /** - Initiates the asynchronous execution of a workletized colorKit function on the UI thread. */\n  runOnUI: typeof colorKitUI;\n};\n\nconst colorKit = colorKitUI() as ColorKit;\ncolorKit.runOnUI = colorKitUI;\nexport default colorKit;\n"],"mappings":"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"}