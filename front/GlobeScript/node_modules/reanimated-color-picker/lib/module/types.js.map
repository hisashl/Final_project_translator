{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import type { ReactNode } from 'react';\nimport type { ImageStyle, StyleProp, TextInputProps, TextStyle, ViewStyle } from 'react-native';\nimport type { AnimatedStyleProp, SharedValue } from 'react-native-reanimated';\nimport type { SupportedColorFormats } from './colorKit/types';\nimport type { Gesture } from 'react-native-gesture-handler/lib/typescript/handlers/gestures/gesture';\n\nexport interface returnedResults {\n  hex: string;\n  rgb: string;\n  rgba: string;\n  hsl: string;\n  hsla: string;\n  hsv: string;\n  hsva: string;\n  hwb: string;\n  hwba: string;\n}\n\nexport type thumbShapeType =\n  | 'ring'\n  | 'solid'\n  | 'hollow'\n  | 'line'\n  | 'plus'\n  | 'pill'\n  | 'triangleUp'\n  | 'triangleDown'\n  | 'doubleTriangle'\n  | 'rect'\n  | 'circle';\n\nexport type HSVObject = {\n  h: number;\n  s: number;\n  v: number;\n  a: number;\n};\n\ntype HSVObjectSharedValue = {\n  hue: SharedValue<number>;\n  saturation: SharedValue<number>;\n  brightness: SharedValue<number>;\n  alpha: SharedValue<number>;\n};\n\nexport type RenderThumbProps = {\n  /**\n   * - This style determines the position of the thumb and is a crucial element that should be included.\n   * - It should be tied to an `Reanimated` component, for example, `<Animated.View style={positionStyle} />`.\n   */\n  positionStyle: StyleProp<ViewStyle | ImageStyle | TextStyle>;\n\n  /**\n   * - A `number` that determines the thumb's width in pixels and is important for thumb position calculation.\n   * - It's extracted from the `thumbSize` prop.\n   */\n  width: number;\n\n  /**\n   * - A `number` that determines the thumb's height in pixels and is important for thumb position calculation.\n   * - It's extracted from the `thumbSize` prop.\n   */\n  height: number;\n\n  /**\n   * - The `adaptiveColor` is a type of `SharedValue<string>` that determines the color to be displayed based on the contrast ratio.\n   * - It can either be a `white` or `black` color.\n   */\n  adaptiveColor: SharedValue<string>;\n\n  /**\n   * - A `SharedValue` of type `string` that represents the current color.\n   * - This shared value will update whenever the color changes, but without the alpha channel.\n   */\n  currentColor: SharedValue<string>;\n\n  /** - The initial color value as a `string` */\n  initialColor: string;\n};\n\nexport type RenderThumbType = React.FC<RenderThumbProps>;\n\nexport type ThumbProps = {\n  thumbColor?: string;\n  handleStyle: StyleProp<ViewStyle>;\n  innerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  renderThumb?: RenderThumbType;\n  vertical?: boolean;\n  adaptSpectrum?: boolean;\n  channel?: 'h' | 's' | 'v' | 'a';\n  thumbShape?: thumbShapeType;\n  thumbSize: number;\n  overrideHSV?: Partial<HSVObjectSharedValue>;\n};\n\nexport interface ExtraThumbProps {\n  /** - Panel handle (thumb) size (height*width). */\n  thumbSize?: number;\n\n  /** - Panel handle (thumb) color. */\n  thumbColor?: string;\n\n  /** - Panel handle (thumb) shape. */\n  thumbShape?: thumbShapeType;\n\n  /** - Render a line from the center of the Panel to the thumb (handle). */\n  renderCenterLine?: boolean;\n\n  /** - Slider's handle (thumb) outer View style. */\n  thumbStyle?: StyleProp<ViewStyle>;\n\n  /** - Slider's handle (thumb) inner View style. */\n  thumbInnerStyle?: StyleProp<ViewStyle>;\n\n  /** - Function which receives ThumbProps and renders slider's handle (thumb). */\n  renderThumb?: RenderThumbType;\n\n  /** - Called when the user moves the sliders. */\n  onChange?: (colors: returnedResults) => void;\n\n  /**\n   * - The transform amount for the hue channel.\n   * - Can be a `number` or a `string`.\n   * - Negative values can be used.\n   * - Example: '50%' or `130`\n   */\n  hueTransform?: string | number;\n  /**\n   * - The transform amount for the saturation channel.\n   * - Can be a `number` or a `string`.\n   * - Negative values can be used.\n   * - Example: '50%' or `50`\n   */\n  saturationTransform?: string | number;\n  /**\n   * - The transform amount for the brightness channel.\n   * - Can be a `number` or a `string`.\n   * - Negative values can be used.\n   * - Example: '50%' or `50`\n   */\n  brightnessTransform?: string | number;\n\n  /**\n   * - Worklet function to transform or modify the color in the HSV (Hue, Saturation, Value) color space.\n   * - The function takes an HSVA color object and returns a new HSVA color object.\n   * - The returned object will determine the thumb's position inside the panel.\n   */\n  colorTransform?: (color: HSVObject) => HSVObject;\n}\n\nexport type BuiltinThumbsProps = {\n  width: number;\n  height: number;\n  borderRadius: number;\n  thumbColor?: string;\n  adaptiveColor: SharedValue<string>;\n  handleStyle: StyleProp<ViewStyle>;\n  innerStyle?: StyleProp<ViewStyle>;\n  style?: StyleProp<ViewStyle>;\n  solidColor: AnimatedStyleProp<ViewStyle>;\n  renderThumb?: RenderThumbType;\n  vertical?: boolean;\n};\n\nexport interface ColorPickerContext {\n  /** Color's channels. */\n  hueValue: SharedValue<number>;\n  saturationValue: SharedValue<number>;\n  brightnessValue: SharedValue<number>;\n  alphaValue: SharedValue<number>;\n\n  /**\n   * A global property that allows the color spectrum to adapt to changes in brightness and saturation for all descendant slider\n   * components.\n   */\n  adaptSpectrum: boolean;\n\n  /** Apply a color to the color picker. */\n  setColor: (color: SupportedColorFormats, duration?: number) => void;\n\n  /** A global prop for all sliders children. */\n  sliderThickness: number;\n\n  /** A global prop for all sliders children. */\n  thumbSize: number;\n\n  /** A global prop for all sliders children. */\n  thumbShape: thumbShapeType;\n\n  /** A global prop for all sliders children. */\n  thumbColor: string | undefined;\n\n  /** A global prop for all sliders children. */\n  thumbStyle: StyleProp<ViewStyle>;\n\n  /** - A global property to controls the scale value animation of the thumb when active. **Default**: `1.2` */\n  thumbScaleAnimationValue: number;\n\n  /** - A global property to sets the duration of the scaling-up animation of the thumb when active. **Default**: `100` */\n  thumbScaleAnimationDuration: number;\n\n  /**\n   * - Determines whether the slider thumb (or handle) should be constrained to stay within the boundaries of the slider.\n   * - When set to true, the thumb will not be allowed to move beyond the edges of the slider.\n   * - When set to false, part of it will be outside of the slider bounds.\n   */\n  boundedThumb: boolean;\n\n  /** A global style for all sliders children. */\n  thumbInnerStyle: StyleProp<ViewStyle>;\n\n  /** A global prop for all sliders children. */\n  renderThumb: RenderThumbType | undefined;\n\n  /** The initial color value as a `string` */\n  value: string;\n\n  /** The returned results of the color picker. */\n  returnedResults: (color?: SupportedColorFormats) => returnedResults;\n\n  /** This function is called when the user lifts the finger from the color picker. */\n  onGestureEnd: (color?: SupportedColorFormats) => void;\n\n  /** This function is called every time the color is changed. */\n  onGestureChange: (color?: SupportedColorFormats) => void;\n}\n\nexport interface Panel3Context {\n  width: SharedValue<number>;\n  adaptSpectrum: boolean;\n  centerChannel: 'saturation' | 'brightness' | 'hsl-saturation';\n  centerChannelValue: SharedValue<number>;\n  thumbShape: thumbShapeType;\n  thumbSize: number;\n  thumbColor?: string;\n  thumbStyle: StyleProp<ViewStyle>;\n  thumbInnerStyle: StyleProp<ViewStyle>;\n  renderThumb?: RenderThumbType;\n  boundedThumb: boolean;\n  renderCenterLine: boolean;\n  rotate: number;\n}\n\nexport interface ColorPickerProps {\n  /**\n   * - A global property that allows the color spectrum to adapt to changes in brightness and saturation for all descendant slider\n   *   components.\n   */\n  adaptSpectrum?: boolean;\n\n  /**\n   * - A global property to change the thickness of all descendant sliders components.\n   * - Thickness is the width of the slider in vertical mode or the height in horizontal mode.\n   */\n  sliderThickness?: number;\n\n  /** - A global property to change the duration which the thumbs animate when the value prop changes. */\n  thumbAnimationDuration?: number;\n\n  /** - A global property to change the thumb size of all descendant sliders components. */\n  thumbSize?: number;\n\n  /** - A global property to change the shape and appearance of the thumb of all descendant sliders components. */\n  thumbShape?: thumbShapeType;\n\n  /** - A global property to change the color of the thumb of all descendant sliders components. */\n  thumbColor?: string;\n\n  /** - A global property to change the style of the thumb's View for all descendant sliders components */\n  thumbStyle?: StyleProp<ViewStyle>;\n\n  /** - A global property to controls the scale value animation of the thumb when active. **Default**: `1.2` */\n  thumbScaleAnimationValue?: number;\n\n  /** - A global property to sets the duration of the scaling-up animation of the thumb when active. **Default**: `100` */\n  thumbScaleAnimationDuration?: number;\n\n  /**\n   * - A global property for all descendant sliders and panels components\n   * - Determines whether the slider thumb (or handle) should be constrained to stay within the boundaries of the slider.\n   * - When set to true, the thumb will not be allowed to move beyond the edges of the slider.\n   * - When set to false, part of it will be outside of the slider bounds.\n   */\n  boundedThumb?: boolean;\n\n  /** - A global property to change the color of the thumb's inner View(s) for all descendant sliders components. */\n  thumbInnerStyle?: StyleProp<ViewStyle>;\n\n  /** - A global function for rendering a thumb component based on ThumbProps. */\n  renderThumb?: RenderThumbType;\n\n  /** - Color picker wrapper style. */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * - Initial color.\n   * - Accepts `hex`, `rgb`, `rgba`, `hsl`, `hsla`, `hsv`, `hsva`, `hwb`, `hwba` and `named color` formats.\n   */\n  value?: string;\n\n  /** - Called when the user moves the sliders. */\n  onChange?: (colors: returnedResults) => void;\n\n  /**\n   * - Called when the user lifts his finger off the sliders.\n   * - CAUTION : As of `react-native-gesture-handler@2.9.0` the new web implementation does not support the events which trigger\n   *   this callback.\n   */\n  onComplete?: (colors: returnedResults) => void;\n\n  children?: React.ReactNode;\n}\n\nexport interface ColorPickerRef {\n  /** Apply a color to the color picker. */\n  setColor: (color: string, duration?: number) => void;\n}\n\nexport interface SwatchesProps {\n  /**\n   * - Swatch style.\n   * - **Note** Certain style properties will be overridden.\n   */\n  swatchStyle?: StyleProp<ViewStyle>;\n\n  /** - Swatches container style. */\n  style?: StyleProp<ViewStyle>;\n\n  /** - Provide your own swatches colors. */\n  colors?: string[];\n}\n\nexport interface PreviewProps {\n  /** - Show color preview in specific format. */\n  colorFormat?: 'hex' | 'rgb' | 'rgba' | 'hsl' | 'hsla' | 'hsv' | 'hsva' | 'hwb' | 'hwba';\n\n  /** - Hide initial color preview and show the picked color preview only. */\n  hideInitialColor?: boolean;\n\n  /** - Hide color preview text. */\n  hideText?: boolean;\n\n  /** - Hide the preview background texture image that appears when the color has an opacity less than 1. */\n  disableOpacityTexture?: boolean;\n\n  /**\n   * - Preview container style.\n   * - **Note** Certain style properties will be overridden.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * - Preview text style.\n   * - **Note** Certain style properties will be overridden..\n   */\n  textStyle?: StyleProp<TextStyle>;\n}\n\nexport interface PreviewTextProps {\n  /** - Show color preview in specific format. */\n  colorFormat?: 'hex' | 'rgb' | 'rgba' | 'hsl' | 'hsla' | 'hsv' | 'hsva' | 'hwb' | 'hwba';\n\n  /** - Preview text style */\n  style?: StyleProp<TextStyle>;\n}\n\nexport interface PanelProps {\n  /** - Panel handle (thumb) size (height*width). */\n  thumbSize?: number;\n\n  /** - Panel handle (thumb) color. */\n  thumbColor?: string;\n\n  /** - Panel handle (thumb) shape. */\n  thumbShape?: thumbShapeType;\n\n  /**\n   * - Determines whether the slider thumb (or handle) should be constrained to stay within the boundaries of the slider.\n   * - When set to true, the thumb will not be allowed to move beyond the edges of the slider.\n   * - When set to false, part of it will be outside of the slider bounds.\n   */\n  boundedThumb?: boolean;\n\n  /** - Slider's handle (thumb) outer View style. */\n  thumbStyle?: StyleProp<ViewStyle>;\n\n  /** - Slider's handle (thumb) inner View style. */\n  thumbInnerStyle?: StyleProp<ViewStyle>;\n\n  /** - Function which receives ThumbProps and renders slider's handle (thumb). */\n  renderThumb?: RenderThumbType;\n\n  /** - Controls the scale value animation of the thumb when active. **Default**: `1.2` */\n  thumbScaleUpValue?: number;\n\n  /** - Sets the duration of the scaling-up animation of the thumb when active. **Default**: `100` */\n  thumbScaleUpDuration?: number;\n\n  /**\n   * - Array of gestures or composed gestures from `react-native-gesture-handler`.\n   * - Will run simultaneously with the color picker gestures.\n   */\n  gestures?: Gesture[];\n\n  /**\n   * - Panel container style.\n   * - **Note** Certain style properties will be overridden.\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\nexport interface Panel2Props extends PanelProps {\n  /** - Reverse (flip) hue direction. */\n  reverseHue?: boolean;\n\n  /** - Reverse (flip) the direction of the vertical channel's saturation or brightness. */\n  reverseVerticalChannel?: boolean;\n\n  /** - Determines which color channel to adjust when moving the thumb vertically on the slider. */\n  verticalChannel?: 'saturation' | 'brightness' | 'hsl-saturation';\n\n  /** - Color spectrum adapts to changes in brightness and saturation */\n  adaptSpectrum?: boolean;\n}\n\nexport interface Panel3Props extends PanelProps {\n  /** - Determines which color channel to adjust when moving the thumb towards or away from the center of the circular slider. */\n  centerChannel?: 'saturation' | 'brightness' | 'hsl-saturation';\n\n  /** - Color spectrum adapts to changes in brightness and saturation */\n  adaptSpectrum?: boolean;\n\n  /** - Render a line from the center of the Panel to the thumb (handle). */\n  renderCenterLine?: boolean;\n\n  /** - Rotate the hue circle, from 0 to 360 */\n  rotate?: number;\n\n  children?: ReactNode;\n}\n\nexport interface Panel4Props extends PanelProps {\n  /** - Reverse (flip) hue direction. */\n  reverseHue?: boolean;\n\n  /** - Reverse (flip) the horizontal channel's brightness and saturation. */\n  reverseHorizontalChannels?: boolean;\n}\n\nexport interface Panel5Props {\n  /**\n   * - Array of gestures or composed gestures from `react-native-gesture-handler`.\n   * - Will run simultaneously with the color picker gestures.\n   */\n  gestures?: Gesture[];\n\n  /**\n   * - Panel container style.\n   * - **Note** Certain style properties will be overridden.\n   */\n  style?: StyleProp<ViewStyle>;\n\n  /**\n   * - The style of the square that indicates the selected color.\n   * - **Note** Certain style properties will be overridden.\n   */\n  selectionStyle?: StyleProp<ViewStyle>;\n}\n\nexport interface SliderProps {\n  /** - Slider's handle (thumb) size (height*width). */\n  thumbSize?: number;\n\n  /** - Slider's handle (thumb) color. */\n  thumbColor?: string;\n\n  /** - Slider's handle (thumb) shape. */\n  thumbShape?: thumbShapeType;\n\n  /**\n   * - Determines whether the slider thumb (or handle) should be constrained to stay within the boundaries of the slider.\n   * - When set to true, the thumb will not be allowed to move beyond the edges of the slider.\n   * - When set to false, part of it will be outside of the slider bounds.\n   */\n  boundedThumb?: boolean;\n\n  /** - Slider's handle (thumb) outer View style. */\n  thumbStyle?: StyleProp<ViewStyle>;\n\n  /** - Slider's handle (thumb) inner View style. */\n  thumbInnerStyle?: StyleProp<ViewStyle>;\n\n  /** - Function which receives ThumbProps and renders slider's handle (thumb). */\n  renderThumb?: RenderThumbType;\n\n  /** - Controls the scale value animation of the thumb when active. **Default**: `1.2` */\n  thumbScaleAnimationValue?: number;\n\n  /** - Sets the duration of the scaling-up animation of the thumb when active. **Default**: `100` */\n  thumbScaleAnimationDuration?: number;\n\n  /** - Thickness is the width of the slider in vertical mode or the height in horizontal mode. */\n  sliderThickness?: number;\n\n  /** - Reverse slider direction. */\n  reverse?: boolean;\n\n  /** - Vertical slider. */\n  vertical?: boolean;\n\n  /** - Color spectrum adapts to changes in brightness and saturation */\n  adaptSpectrum?: boolean;\n\n  /**\n   * - Array of gestures or composed gestures from `react-native-gesture-handler`.\n   * - Will run simultaneously with the color picker gestures.\n   */\n  gestures?: Gesture[];\n\n  /**\n   * - Slider's container style.\n   * - **Note** Certain style properties will be overridden.\n   */\n  style?: StyleProp<ViewStyle>;\n}\n\nexport type RgbSliderProps = Omit<SliderProps, 'adaptSpectrum'>;\n\nexport interface HueCircularProps extends Omit<SliderProps, 'vertical' | 'reverse' | 'boundedThumb'> {\n  children?: ReactNode;\n\n  /** - The style of the container that wraps the given children. */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /** - Rotate the hue circle, from 0 to 360 */\n  rotate?: number;\n}\n\nexport interface LuminanceCircularProps extends Omit<SliderProps, 'vertical' | 'reverse' | 'boundedThumb'> {\n  children?: ReactNode;\n\n  /** - The style of the container that wraps the given children. */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /** - Rotate the hue circle, from 0 to 360 */\n  rotate?: number;\n}\n\nexport type InputProps = Omit<\n  TextInputProps,\n  | 'ref'\n  | 'style'\n  | 'value'\n  | 'maxLength'\n  | 'onChangeText'\n  | 'onBlur'\n  | 'onFocus'\n  | 'keyboardType'\n  | 'autoComplete'\n  | 'autoCorrect'\n  | 'defaultValue'\n>;\n\nexport type WidgetProps = {\n  onChange: (color: SupportedColorFormats) => void;\n  returnedResults: ColorPickerContext['returnedResults'];\n  hueValue: ColorPickerContext['hueValue'];\n  saturationValue: ColorPickerContext['saturationValue'];\n  brightnessValue: ColorPickerContext['brightnessValue'];\n  alphaValue: ColorPickerContext['alphaValue'];\n  inputStyle: StyleProp<TextStyle>;\n  inputTitleStyle?: StyleProp<TextStyle>;\n  inputProps: InputProps;\n  disableAlphaChannel: boolean;\n};\n\ntype defaultFormats = 'HEX' | 'RGB' | 'HSL' | 'HWB' | 'HSV';\n\nexport interface InputWidgetProps {\n  /**\n   * - The initial input widget color format.\n   * - You can select one of the following options: `'HEX'`, `'RGB'`, '`HSL'`, `'HWB'`, or `'HSV'`\n   */\n  defaultFormat?: defaultFormats;\n\n  /**\n   * - What input widgets should be included that can be cycled through.\n   * - Available options: `'HEX'`, `'RGB'`, '`HSL'`, `'HWB'`, and `'HSV'`\n   */\n  formats?: readonly defaultFormats[];\n\n  /** - Limit the user's ability to modify the alpha channel of the selected color. */\n  disableAlphaChannel?: boolean;\n\n  /** - `InputText` components style. */\n  inputStyle?: StyleProp<TextStyle>;\n\n  /** - The props for the `TextInput` components. */\n  inputProps?: InputProps;\n\n  /** - The style of the `Text` component for the title located below the inputs. */\n  inputTitleStyle?: StyleProp<TextStyle>;\n\n  /** - The style of the `View` component that wraps around all the widgets. */\n  containerStyle?: StyleProp<ViewStyle>;\n\n  /** - The color of the cycle button icon (`Image` component). */\n  iconColor?: string;\n\n  /** - The style of the cycle button (`Image` component). */\n  iconStyle?: StyleProp<ImageStyle>;\n}\n"],"mappings":""}