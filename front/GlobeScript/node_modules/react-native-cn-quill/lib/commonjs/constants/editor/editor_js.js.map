{"version":3,"sources":["editor_js.ts"],"names":["editor_js"],"mappings":";;;;;;AAAO,MAAMA,SAAS,GAAI;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA/WO","sourcesContent":["export const editor_js = `\r\n<script>\r\n(function (doc) {\r\n\r\n  var getAttributes = function (node) {\r\n    const attrArray = node?.attributes ? [...node.attributes] : [];\r\n    return attrArray.reduce((_attr, node) => ({ ..._attr, [node.nodeName]: node.nodeValue}), {});\r\n  }\r\n\r\n  var sendMessage = function (message) {\r\n    if (window.ReactNativeWebView)\r\n      window.ReactNativeWebView.postMessage(message);\r\n      else console.log(message)\r\n  }\r\n\r\n  // Get the dimensions of the quill content field\r\n  var getDimensions = function (key) {\r\n    const dimensionsJson = JSON.stringify({\r\n      type: 'get-dimensions',\r\n      key: key,\r\n      data: {\r\n        width: quill.root.scrollWidth,\r\n        height: quill.root.scrollHeight\r\n      }\r\n    });\r\n    sendMessage(dimensionsJson);\r\n  }\r\n\r\n  var getSelectedFormats = function () {\r\n    var formats = quill.getFormat();\r\n      var contentChanged = JSON.stringify({\r\n                type: 'format-change',\r\n                data: {formats} });\r\n      sendMessage(contentChanged);\r\n  }\r\n  //Format text at userâ€™s current selection\r\n  var formatSelection = function (name, value) {\r\n    var range = quill.getSelection();\r\n    if (!range) quill.focus();\r\n    quill.format(name, value);\r\n    getSelectedFormats();\r\n  }\r\n\r\n  var hasFocus = function (key) {\r\n    var hs = quill.hasFocus();\r\n\r\n    var hsJson = JSON.stringify({\r\n                type: 'has-focus',\r\n                key: key,\r\n                data: hs });\r\n      sendMessage(hsJson);\r\n  }\r\n\r\n  var getContents = function (key, index, length) {\r\n    var getContentsData = quill.getContents(index, length);\r\n    var getContentsDataJson = JSON.stringify({\r\n      type: 'get-contents',\r\n      key: key,\r\n      data: getContentsData });\r\n      sendMessage(getContentsDataJson);\r\n  }\r\n\r\n  var getText = function (key, index, length) {\r\n    var getTextData = quill.getText(index, length);\r\n    var getTextDataJson = JSON.stringify({\r\n      type: 'get-text',\r\n      key: key,\r\n      data: getTextData });\r\n      sendMessage(getTextDataJson);\r\n  }\r\n\r\n  var getLength = function (key) {\r\n    var getLengthData = quill.getLength();\r\n    var getLengthDataJson = JSON.stringify({\r\n      type: 'get-length',\r\n      key: key,\r\n      data: getLengthData });\r\n      sendMessage(getLengthDataJson);\r\n  }\r\n\r\n  var getHtml = function (key) {\r\n    var html = quill.root.innerHTML;\r\n    var getHtmlJson = JSON.stringify({\r\n      type: 'get-html',\r\n      key: key,\r\n      data: html\r\n    });\r\n    sendMessage(getHtmlJson);\r\n  }\r\n\r\n  var insertEmbed = function (index, type, value) {\r\n    quill.insertEmbed(index, type, value);\r\n  }\r\n\r\n  var insertText = function (index, text, formats={}) {\r\n    quill.insertText(index, text, formats);\r\n  }\r\n\r\n  var setContents = function (key, delta) {\r\n    try {\r\n      var setContentsData = quill.setContents(delta);\r\n      var setContentsDataJson = JSON.stringify({\r\n        type: 'set-contents',\r\n        key: key,\r\n        data: setContentsData });\r\n        sendMessage(setContentsDataJson);\r\n    } catch (error) {\r\n      var errorJson = JSON.stringify({\r\n        type: 'set-contents-error',\r\n        key: key,\r\n        data: { message: error.message, stack: error.stack } });\r\n        sendMessage(errorJson);\r\n\r\n        var setContentsDataJson = JSON.stringify({\r\n          type: 'set-contents',\r\n          key: key,\r\n          data: {} });\r\n          sendMessage(setContentsDataJson);\r\n    }\r\n  }\r\n\r\n  var setText = function (text) {\r\n    quill.setText(text);\r\n  }\r\n\r\n  var setPlaceholder = function (text) {\r\n    quill.root.dataset.placeholder = text;\r\n  }\r\n\r\n  var updateContents = function (delta) {\r\n    quill.updateContents(delta);\r\n  }\r\n\r\n  var dangerouslyPasteHTML = function (index, html) {\r\n    quill.clipboard.dangerouslyPasteHTML(index, html);\r\n  }\r\n\r\n  var setSelection = function (index, length = 0, source = 'api') {\r\n    quill.setSelection(index, length, source);\r\n  }\r\n\r\n  var getBounds = function (key, index, length = 0) {\r\n    var boundsData = quill.getBounds(index, length);\r\n    var getBoundsJson = JSON.stringify({\r\n      type: 'get-bounds',\r\n      key: key,\r\n      data: boundsData });\r\n      sendMessage(getBoundsJson);\r\n  }\r\n\r\n  var getSelection = function (key, focus = false) {\r\n    var getSelectionData = quill.getSelection(focus);\r\n    var getSelectionJson = JSON.stringify({\r\n      type: 'get-selection',\r\n      key: key,\r\n      data: getSelectionData \r\n    });\r\n    sendMessage(getSelectionJson);\r\n  }\r\n\r\n  const getFormat = function (key, index, length) {\r\n    const getFormatData = quill.getFormat(index, length);\r\n    const getFormatJson = JSON.stringify({\r\n      type: 'get-format',\r\n      key: key,\r\n      data: getFormatData\r\n    });\r\n    sendMessage(getFormatJson);\r\n  }\r\n\r\n  const getLeaf = function (key, index) {\r\n    const [leaf, offset] = quill.getLeaf(index);\r\n    const getLeafData = leaf ? {\r\n      offset,\r\n      text: leaf.text,\r\n      length: leaf.text.length,\r\n      index: quill.getIndex(leaf),\r\n      attributes: getAttributes(leaf?.parent?.domNode)\r\n    } : null\r\n    const getLeafJson = JSON.stringify({\r\n      type: 'get-leaf',\r\n      key: key,\r\n      data: getLeafData\r\n    });\r\n    sendMessage(getLeafJson);\r\n  }\r\n\r\n  const removeFormat = function (key, index, length) {\r\n    const removeFormatData = quill.removeFormat(index, length);\r\n    const removeFormatJson = JSON.stringify({\r\n      type: 'remove-format',\r\n      key: key,\r\n      data: removeFormatData\r\n    });\r\n    sendMessage(removeFormatJson);\r\n  }\r\n\r\n  const formatText = function (key, index, length, formats, source) {\r\n    const formatTextData = quill.formatText(index, length, formats, source);\r\n    const formatTextJson = JSON.stringify({\r\n      type: 'format-text',\r\n      key: key,\r\n      data: formatTextData\r\n    });\r\n    sendMessage(formatTextJson);\r\n  }\r\n\r\n\r\n  var getRequest = function (event) {\r\n    var msg = JSON.parse(event.data);\r\n    switch (msg.command) {\r\n      case 'format':\r\n        formatSelection(msg.name, msg.value);\r\n        break;\r\n      case 'focus':\r\n        quill.focus();\r\n        break;\r\n      case 'blur':\r\n        quill.blur();\r\n        break;\r\n      case 'enable':\r\n        quill.enable(msg.value);\r\n        break;\r\n      case 'hasFocus':\r\n        hasFocus(msg.key);\r\n        break;\r\n      case 'deleteText':\r\n        quill.deleteText(msg.index, msg.length);\r\n        break;\r\n      case 'getDimensions':\r\n        getDimensions(msg.key);\r\n        break;\r\n      case 'getContents':\r\n        getContents(msg.key, msg.index, msg.length);\r\n        break;\r\n      case 'getText':\r\n        getText(msg.key, msg.index, msg.length);\r\n        break;\r\n      case 'getBounds':\r\n        getBounds(msg.key, msg.index, msg.length);\r\n        break;\r\n      case 'getSelection':\r\n        getSelection(msg.key, msg.focus);\r\n        break;\r\n      case 'getFormat': \r\n        getFormat(msg.key, msg?.index, msg?.length);\r\n        break;\r\n      case 'getLeaf':\r\n        getLeaf(msg.key, msg.index);\r\n        break;\r\n      case 'setSelection':\r\n        setSelection(msg.index, msg.length, msg.source);\r\n        break;\r\n      case 'getHtml':\r\n        getHtml(msg.key);\r\n        break;\r\n      case 'getLength':\r\n        getLength(msg.key);\r\n        break;\r\n      case 'insertEmbed':\r\n        insertEmbed(msg.index, msg.type, msg.value);\r\n        break;\r\n      case 'insertText':\r\n        insertText(msg.index, msg.text, msg.formats);\r\n        break;\r\n      case 'setContents':\r\n        setContents(msg.key, msg.delta);\r\n        break;\r\n      case 'setText':\r\n        setText(msg.text);\r\n        break;\r\n      case 'setPlaceholder':\r\n        setPlaceholder(msg.text);\r\n        break;\r\n      case 'updateContents':\r\n        updateContents(msg.delta);\r\n        break;\r\n      case 'dangerouslyPasteHTML':\r\n        dangerouslyPasteHTML(msg.index, msg.html);\r\n        break;\r\n      case 'removeFormat':\r\n        removeFormat(msg.key, msg.index, msg.length);\r\n        break;\r\n      case 'formatText':\r\n        formatText(msg.key, msg.index, msg.length, msg.formats, msg.source);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  document.addEventListener(\"message\", getRequest, false);\r\n  window.addEventListener(\"message\", getRequest, false);\r\n\r\n  quill.on('editor-change', function(eventName, ...args) {\r\n    if (eventName === 'text-change') {\r\n      getSelectedFormats();\r\n    } else if (eventName === 'selection-change') {\r\n      var range = quill.getSelection();\r\n      if (range) {\r\n        getSelectedFormats();\r\n      }\r\n    }\r\n    var getEditorChange = JSON.stringify({\r\n      type: 'editor-change',\r\n      data: { eventName, args }\r\n    });\r\n    sendMessage(getEditorChange);\r\n\r\n    // Notify of dimensions update\r\n    const getDimensionsJson = JSON.stringify({\r\n      type: 'dimensions-change',\r\n      data: {\r\n        width: quill.root.scrollWidth,\r\n        height: quill.root.scrollHeight\r\n      }\r\n    });\r\n    sendMessage(getDimensionsJson);\r\n  });\r\n\r\n  quill.on('text-change', function(delta, oldDelta, source) {\r\n    var getTextChange = JSON.stringify({\r\n      type: 'text-change',\r\n      data: { delta, oldDelta, source }\r\n    });\r\n    sendMessage(getTextChange);\r\n\r\n    // Notify of HTML update\r\n    var html = quill.root.innerHTML;\r\n    var getHtmlJson = JSON.stringify({\r\n      type: 'html-change',\r\n      data: { html }\r\n    });\r\n    sendMessage(getHtmlJson);\r\n  });\r\n\r\n  quill.on('selection-change', function(range, oldRange, source) {\r\n    var getSelectionChange = JSON.stringify({\r\n      type: 'selection-change',\r\n      data: { range, oldRange, source } });\r\n      sendMessage(getSelectionChange)\r\n  });\r\n\r\n  quill.root.addEventListener('blur', function () {\r\n    sendMessage(JSON.stringify({type: 'blur'}));\r\n  });\r\n\r\n  quill.root.addEventListener('focus', function () {\r\n    sendMessage(JSON.stringify({type: 'focus'}));\r\n  });\r\n\r\n\r\n\r\n  // Report initial dimensions when the editor is instantiated\r\n  setTimeout(() => {\r\n    const getDimensionsJson = JSON.stringify({\r\n      type: 'dimensions-change',\r\n      data: {\r\n        width: quill.root.scrollWidth,\r\n        height: quill.root.scrollHeight\r\n      }\r\n    });\r\n    sendMessage(getDimensionsJson);\r\n  }, 250)\r\n\r\n})(document)\r\n</script>\r\n`;\r\n"]}