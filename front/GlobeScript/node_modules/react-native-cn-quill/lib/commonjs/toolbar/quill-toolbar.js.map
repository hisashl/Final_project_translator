{"version":3,"sources":["quill-toolbar.tsx"],"names":["WIDTH","Dimensions","get","width","QuillToolbar","Component","constructor","props","options","custom","toolbarOptions","fullOptions","basicOptions","toolSets","icons","state","defaultFontFamily","setState","setTimeout","editor","current","on","onFormatChange","data","formats","name","value","format","styles","theme","defaultStyles","makeStyles","toolbarStyle","toolbar","root","map","object","index","length","color","lightTheme","undefined","componentDidMount","listenToEditor","prepareIconset","changeTheme","componentDidUpdate","prevProps","prevState","darkTheme","render","container","e","stopPropagation","Platform","OS","renderToolbar","ContainerComponent","StyleSheet","create","position","bottom","left","padding","backgroundColor","background","flexDirection","justifyContent","height","size"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n  View,\r\n  KeyboardAvoidingView,\r\n  ScrollView,\r\n  Dimensions,\r\n  StyleSheet,\r\n  Platform,\r\n} from 'react-native';\r\nimport { fullOptions, basicOptions } from '../constants/toolbar-options';\r\nimport type {\r\n  ToolbarTheme,\r\n  TextListData,\r\n  ToggleData,\r\n  ColorListData,\r\n  ToolbarCustom,\r\n  CustomStyles,\r\n} from '../types';\r\nimport { lightTheme, darkTheme } from '../constants/themes';\r\nimport { getToolbarData } from '../utils/toolbar-utils';\r\nimport type QuillEditor from '../editor/quill-editor';\r\nimport { ToolbarProvider } from './components/toolbar-context';\r\nimport { SelectionBar } from './components/selection-bar';\r\nimport { ToolSet } from './components/tool-set';\r\nimport { ToolbarSeparator } from './components/toolbar-separator';\r\nimport type { FormatChangeData } from '../constants/editor-event';\r\n\r\nconst WIDTH = Dimensions.get('window').width;\r\n\r\ninterface QuillToolbarProps {\r\n  options: Array<Array<string | object> | string | object> | 'full' | 'basic';\r\n  styles?: CustomStyles;\r\n  editor: React.RefObject<QuillEditor>;\r\n  theme: ToolbarTheme | 'dark' | 'light';\r\n  custom?: ToolbarCustom;\r\n  container?: false | 'avoiding-view' | React.ComponentType;\r\n}\r\n\r\ninterface ToolbarState {\r\n  toolSets: Array<Array<ToggleData | TextListData | ColorListData>>;\r\n  formats: object;\r\n  theme: ToolbarTheme;\r\n  defaultFontFamily?: string;\r\n}\r\n\r\nexport class QuillToolbar extends Component<QuillToolbarProps, ToolbarState> {\r\n  public static defaultProps = {\r\n    theme: 'dark',\r\n  };\r\n\r\n  constructor(props: QuillToolbarProps) {\r\n    super(props);\r\n    this.state = {\r\n      toolSets: [],\r\n      formats: {},\r\n      theme: lightTheme,\r\n      defaultFontFamily: undefined,\r\n    };\r\n  }\r\n\r\n  editor?: QuillEditor;\r\n\r\n  componentDidMount() {\r\n    this.listenToEditor();\r\n    this.prepareIconset();\r\n    this.changeTheme();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: QuillToolbarProps, prevState: ToolbarState) {\r\n    if (\r\n      prevProps.options !== this.props.options ||\r\n      prevState.defaultFontFamily !== this.state.defaultFontFamily\r\n    ) {\r\n      this.prepareIconset();\r\n    }\r\n    if (prevProps.theme !== this.props.theme) {\r\n      this.changeTheme();\r\n    }\r\n  }\r\n\r\n  changeTheme() {\r\n    let theme: ToolbarTheme = lightTheme;\r\n\r\n    if (this.props.theme === 'dark') {\r\n      theme = darkTheme;\r\n    } else if (this.props.theme !== 'light') {\r\n      theme = this.props.theme;\r\n    }\r\n    this.setState({ theme });\r\n  }\r\n\r\n  private prepareIconset = () => {\r\n    const { options, custom } = this.props;\r\n    let toolbarOptions: Array<Array<string | object> | string | object> = [];\r\n    if (options === 'full' || options === []) {\r\n      toolbarOptions = fullOptions;\r\n    } else if (options === 'basic') {\r\n      toolbarOptions = basicOptions;\r\n    } else {\r\n      toolbarOptions = options;\r\n    }\r\n    const toolSets = getToolbarData(\r\n      toolbarOptions,\r\n      custom?.icons,\r\n      this.state.defaultFontFamily\r\n    );\r\n    this.setState({ toolSets });\r\n  };\r\n\r\n  private listenToEditor = () => {\r\n    setTimeout(() => {\r\n      const {\r\n        editor: { current },\r\n      } = this.props;\r\n      if (current) {\r\n        this.editor = current;\r\n        current.on('format-change', this.onFormatChange);\r\n        if (this.editor?.props.defaultFontFamily) {\r\n          this.setState({\r\n            defaultFontFamily: this.editor?.props.defaultFontFamily,\r\n          });\r\n        }\r\n      }\r\n    }, 200);\r\n  };\r\n\r\n  private onFormatChange = (data: FormatChangeData) => {\r\n    this.setState({ formats: data.formats });\r\n  };\r\n\r\n  private format = (name: string, value: any) => {\r\n    this.editor?.format(name, value);\r\n  };\r\n\r\n  renderToolbar = () => {\r\n    const { styles, custom } = this.props;\r\n    const { toolSets, theme, formats } = this.state;\r\n    const defaultStyles = makeStyles(theme);\r\n\r\n    const toolbarStyle = styles?.toolbar?.root\r\n      ? styles?.toolbar?.root(defaultStyles.toolbar)\r\n      : defaultStyles.toolbar;\r\n    return (\r\n      <ToolbarProvider\r\n        theme={theme}\r\n        format={this.format}\r\n        selectedFormats={formats}\r\n        custom={custom}\r\n        styles={styles}\r\n      >\r\n        <SelectionBar />\r\n        <View style={toolbarStyle}>\r\n          <ScrollView\r\n            horizontal={true}\r\n            bounces={false}\r\n            showsHorizontalScrollIndicator={false}\r\n          >\r\n            {toolSets.map((object, index) => {\r\n              return (\r\n                object.length > 0 && (\r\n                  <React.Fragment key={index}>\r\n                    <ToolSet tools={object} />\r\n                    {toolSets.length > index && (\r\n                      <ToolbarSeparator color={theme.color} />\r\n                    )}\r\n                  </React.Fragment>\r\n                )\r\n              );\r\n            })}\r\n          </ScrollView>\r\n        </View>\r\n      </ToolbarProvider>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { container = 'avoiding-view' } = this.props;\r\n    if (container === 'avoiding-view')\r\n      return (\r\n        <KeyboardAvoidingView\r\n          onTouchStart={(e) => e.stopPropagation()}\r\n          behavior={Platform.OS === 'ios' ? 'padding' : 'height'}\r\n        >\r\n          {this.renderToolbar()}\r\n        </KeyboardAvoidingView>\r\n      );\r\n    else if (container === false) return this.renderToolbar();\r\n    else {\r\n      const ContainerComponent = container;\r\n      return <ContainerComponent>{this.renderToolbar()}</ContainerComponent>;\r\n    }\r\n  }\r\n}\r\n\r\nconst makeStyles = (theme: ToolbarTheme) =>\r\n  StyleSheet.create({\r\n    toolbar: {\r\n      position: 'absolute',\r\n      bottom: 0,\r\n      left: 0,\r\n      width: WIDTH,\r\n      padding: 2,\r\n      backgroundColor: theme.background,\r\n      flexDirection: 'row',\r\n      justifyContent: 'flex-start',\r\n      height: theme.size + 8,\r\n    },\r\n  });\r\n"]}