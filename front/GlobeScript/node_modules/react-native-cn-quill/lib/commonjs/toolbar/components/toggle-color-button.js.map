{"version":3,"sources":["toggle-color-button.tsx"],"names":["ToggleColorButton","props","apply","isSelected","theme","styles","name","valueOff","valueOn","selected","handlePresss","defaultStyles","makeStyles","toolStyle","selection","colorToggle","tool","overlayStyle","overlay","noColorStyle","noColor","backgroundColor","StyleSheet","create","absoluteFillObject","borderRadius","borderWidth","borderColor","color","alignItems","justifyContent","marginRight","marginLeft","height","Math","round","size","width","borderTopWidth","transform","rotate","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { TouchableWithoutFeedback, View, StyleSheet } from 'react-native';\r\nimport type { ToolbarTheme } from '../../types';\r\nimport { useToolbar } from './toolbar-context';\r\n\r\ninterface Props {\r\n  valueOn: string | false;\r\n  valueOff?: string | false;\r\n  name: string;\r\n}\r\n\r\nexport const ToggleColorButton: React.FC<Props> = (props) => {\r\n  const { apply, isSelected, theme, styles } = useToolbar();\r\n  const { name, valueOff, valueOn } = props;\r\n  const selected = isSelected(name, valueOn);\r\n  const handlePresss = () => apply(name, selected ? valueOff : valueOn);\r\n  const defaultStyles = makeStyles(theme);\r\n  const toolStyle = styles?.selection?.colorToggle?.tool\r\n    ? styles.selection.colorToggle.tool(defaultStyles.tool)\r\n    : defaultStyles.tool;\r\n  const overlayStyle = styles?.selection?.colorToggle?.overlay\r\n    ? styles.selection.colorToggle.overlay(defaultStyles.overlay)\r\n    : defaultStyles.overlay;\r\n  const noColorStyle = styles?.selection?.colorToggle?.noColor\r\n    ? styles.selection.colorToggle.noColor(defaultStyles.noColor)\r\n    : defaultStyles.noColor;\r\n  return (\r\n    <TouchableWithoutFeedback onPress={handlePresss}>\r\n      <View\r\n        style={[\r\n          toolStyle,\r\n          {\r\n            backgroundColor: valueOn !== false ? valueOn : theme.overlay,\r\n          },\r\n        ]}\r\n      >\r\n        {selected && <View style={overlayStyle} />}\r\n        {valueOn === false && <View style={noColorStyle} />}\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};\r\n\r\nconst makeStyles = (theme: ToolbarTheme) =>\r\n  StyleSheet.create({\r\n    overlay: {\r\n      ...StyleSheet.absoluteFillObject,\r\n      borderRadius: 3,\r\n      borderWidth: 1,\r\n      borderColor: theme.color,\r\n    },\r\n    tool: {\r\n      borderRadius: 3,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      marginRight: 4,\r\n      marginLeft: 4,\r\n      height: Math.round(theme.size - 2),\r\n      width: Math.round(theme.size - 2),\r\n    },\r\n    noColor: {\r\n      borderTopWidth: 1,\r\n      backgroundColor: theme.overlay,\r\n      borderColor: theme.color,\r\n      width: '100%',\r\n      transform: [{ rotate: '45deg' }],\r\n    },\r\n  });\r\n\r\nToggleColorButton.defaultProps = {\r\n  valueOff: false,\r\n};\r\n"]}