{"version":3,"sources":["color-list-button.tsx"],"names":["ColorListButton","name","items","source","theme","show","hide","open","selectionName","getSelected","styles","defaultStyles","makeStyles","toolStyle","toolbar","toolset","colorListButton","tool","overlayStyle","overlay","imageStyle","image","showMenu","selectedValue","selectedItem","find","x","valueOn","isOpen","tintColor","color","StyleSheet","create","absoluteFillObject","backgroundColor","borderRadius","alignItems","justifyContent","padding","marginRight","marginLeft","height","Math","round","size","width"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  View,\r\n  Image,\r\n  StyleSheet,\r\n  TouchableOpacity,\r\n  ImageSourcePropType,\r\n} from 'react-native';\r\nimport type { ToggleData, ToolbarTheme } from '../../types';\r\nimport { useToolbar } from './toolbar-context';\r\n\r\ninterface Props {\r\n  name: string;\r\n  source: ImageSourcePropType;\r\n  items: Array<ToggleData>;\r\n}\r\n\r\nexport const ColorListButton: React.FC<Props> = ({ name, items, source }) => {\r\n  const {\r\n    theme,\r\n    show,\r\n    hide,\r\n    open,\r\n    selectionName,\r\n    getSelected,\r\n    styles,\r\n  } = useToolbar();\r\n  const defaultStyles = makeStyles(theme);\r\n  const toolStyle = styles?.toolbar?.toolset?.colorListButton?.tool\r\n    ? styles.toolbar?.toolset?.colorListButton.tool(defaultStyles.tool)\r\n    : defaultStyles.tool;\r\n  const overlayStyle = styles?.toolbar?.toolset?.colorListButton?.overlay\r\n    ? styles.toolbar?.toolset?.colorListButton.overlay(defaultStyles.overlay)\r\n    : defaultStyles.overlay;\r\n  const imageStyle = styles?.toolbar?.toolset?.colorListButton?.image\r\n    ? styles.toolbar?.toolset?.colorListButton.image(defaultStyles.image)\r\n    : defaultStyles.image;\r\n\r\n  const showMenu = () => {\r\n    if (open && selectionName === name) hide();\r\n    else show(name, items);\r\n  };\r\n\r\n  const selectedValue = getSelected(name);\r\n  const selectedItem = items.find((x) => x.valueOn === selectedValue);\r\n  const isOpen = selectionName === name;\r\n  return (\r\n    <TouchableOpacity onPress={showMenu}>\r\n      <View style={toolStyle}>\r\n        <Image\r\n          source={source}\r\n          style={[\r\n            imageStyle,\r\n            {\r\n              tintColor:\r\n                selectedItem &&\r\n                selectedItem.valueOn !== false &&\r\n                typeof selectedItem.valueOn === 'string'\r\n                  ? selectedItem.valueOn\r\n                  : theme.color,\r\n            },\r\n          ]}\r\n        />\r\n        {isOpen && <View style={overlayStyle} />}\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst makeStyles = (theme: ToolbarTheme) =>\r\n  StyleSheet.create({\r\n    overlay: {\r\n      ...StyleSheet.absoluteFillObject,\r\n      backgroundColor: theme.overlay,\r\n      borderRadius: 3,\r\n    },\r\n    tool: {\r\n      borderRadius: 3,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      padding: 2,\r\n      marginRight: 4,\r\n      marginLeft: 4,\r\n      height: Math.round(theme.size),\r\n      width: Math.round(theme.size),\r\n    },\r\n    image: {\r\n      height: Math.round(theme.size * 0.6),\r\n      width: Math.round(theme.size * 0.6),\r\n      tintColor: theme.color,\r\n    },\r\n  });\r\n"]}