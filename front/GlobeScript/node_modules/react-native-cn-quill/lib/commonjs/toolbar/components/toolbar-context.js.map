{"version":3,"sources":["toolbar-context.tsx"],"names":["ToolbarContext","React","createContext","apply","show","hide","selectedFormats","open","isSelected","theme","lightTheme","options","selectionName","getSelected","ToolbarConsumer","Consumer","ToolbarProvider","Component","constructor","props","name","state","isAnimating","setState","Animated","timing","animatedValue","toValue","size","duration","easing","Easing","sin","useNativeDriver","start","linear","value","selected","format","custom","actions","find","x","indexOf","handler","Value","componentDidMount","render","children","styles","defaultStyles","makeStyles","rootStyle","toolbar","provider","root","height","StyleSheet","create","borderTopWidth","borderLeftWidth","borderRightWidth","borderColor","color","position","backgroundColor","background","width","withToolbar","MyComponent","WrappedComponent","forwardRef","ref","context","useToolbar"],"mappings":"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","sourcesContent":["import React, { Component, useContext } from 'react';\r\nimport { StyleSheet, Animated, Easing } from 'react-native';\r\nimport { lightTheme } from '../../constants/themes';\r\nimport type {\r\n  CustomStyles,\r\n  ToggleData,\r\n  ToolbarCustom,\r\n  ToolbarTheme,\r\n} from '../../types';\r\n\r\nexport interface ContextProps {\r\n  apply: (name: string, value: any) => void;\r\n  selectedFormats: object;\r\n  isSelected: (name: string, value: any) => boolean;\r\n  theme: ToolbarTheme;\r\n  show: (name: string, options: Array<ToggleData>) => void;\r\n  hide: Function;\r\n  open: boolean;\r\n  options: Array<ToggleData>;\r\n  selectionName: string;\r\n  getSelected: (name: string) => any;\r\n  styles?: CustomStyles;\r\n}\r\n\r\nconst ToolbarContext = React.createContext<ContextProps>({\r\n  apply: () => {},\r\n  show: () => {},\r\n  hide: () => {},\r\n  selectedFormats: {},\r\n  open: false,\r\n  isSelected: () => false,\r\n  theme: lightTheme,\r\n  options: [],\r\n  selectionName: '',\r\n  getSelected: () => false,\r\n});\r\n\r\nexport const ToolbarConsumer = ToolbarContext.Consumer;\r\n\r\ninterface ProviderProps {\r\n  format: Function;\r\n  selectedFormats: Record<string, any>;\r\n  theme: ToolbarTheme;\r\n  custom?: ToolbarCustom;\r\n  styles?: CustomStyles;\r\n}\r\n\r\ninterface ProviderState {\r\n  open: boolean;\r\n  isAnimating: boolean;\r\n  options: Array<ToggleData>;\r\n  name: string;\r\n}\r\n\r\nexport class ToolbarProvider extends Component<ProviderProps, ProviderState> {\r\n  animatedValue: Animated.Value;\r\n  constructor(props: ProviderProps) {\r\n    super(props);\r\n    this.state = {\r\n      open: false,\r\n      isAnimating: false,\r\n      options: [],\r\n      name: '',\r\n    };\r\n    this.animatedValue = new Animated.Value(0);\r\n  }\r\n\r\n  show = (name: string, options: Array<ToggleData>) => {\r\n    if (this.state.isAnimating) return;\r\n\r\n    const { theme } = this.props;\r\n    if (theme) {\r\n      this.setState({ options, name, isAnimating: true }, () => {\r\n        Animated.timing(this.animatedValue, {\r\n          toValue: 2 * theme.size + 14,\r\n          duration: 200,\r\n          easing: Easing.sin,\r\n          useNativeDriver: false,\r\n        }).start(() => this.setState({ open: true, isAnimating: false }));\r\n      });\r\n    }\r\n  };\r\n\r\n  hide = () => {\r\n    if (this.state.isAnimating) return;\r\n    const { theme } = this.props;\r\n    if (theme) {\r\n      this.setState({ isAnimating: true }, () => {\r\n        Animated.timing(this.animatedValue, {\r\n          toValue: theme.size + 10,\r\n          duration: 200,\r\n          easing: Easing.linear,\r\n          useNativeDriver: false,\r\n        }).start(() => {\r\n          this.setState({\r\n            name: '',\r\n            open: false,\r\n            options: [],\r\n            isAnimating: false,\r\n          });\r\n        });\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { theme } = this.props;\r\n    this.animatedValue = new Animated.Value(theme.size + 10);\r\n  }\r\n\r\n  isSelected = (name: string, value: any = true): boolean => {\r\n    const { selectedFormats } = this.props;\r\n    const selected = selectedFormats[name];\r\n    return selected ? selected === value : value === false;\r\n  };\r\n\r\n  getSelected = (name: string): any => {\r\n    const { selectedFormats } = this.props;\r\n    const selected = selectedFormats[name];\r\n    return selected ? selected : false;\r\n  };\r\n\r\n  apply = (name: string, value: any) => {\r\n    const { format, custom } = this.props;\r\n\r\n    if (custom?.actions) custom.actions.find((x) => x === name);\r\n    if (custom?.actions && custom?.actions?.indexOf(name) > -1) {\r\n      if (custom?.handler) custom.handler(name, value);\r\n    } else {\r\n      format(name, value);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { selectedFormats, children, theme, styles } = this.props;\r\n    const { open, options, name } = this.state;\r\n    const defaultStyles = makeStyles(theme);\r\n    const rootStyle = styles?.toolbar?.provider\r\n      ? styles?.toolbar?.provider(defaultStyles.root)\r\n      : defaultStyles.root;\r\n    return (\r\n      <ToolbarContext.Provider\r\n        value={{\r\n          selectedFormats,\r\n          apply: this.apply,\r\n          isSelected: this.isSelected,\r\n          theme,\r\n          open,\r\n          show: this.show,\r\n          hide: this.hide,\r\n          getSelected: this.getSelected,\r\n          selectionName: name,\r\n          options,\r\n          styles,\r\n        }}\r\n      >\r\n        <Animated.View\r\n          style={[\r\n            rootStyle,\r\n            {\r\n              height: this.animatedValue,\r\n            },\r\n          ]}\r\n        >\r\n          {children}\r\n        </Animated.View>\r\n      </ToolbarContext.Provider>\r\n    );\r\n  }\r\n}\r\n\r\nconst makeStyles = (theme: ToolbarTheme) =>\r\n  StyleSheet.create({\r\n    root: {\r\n      borderTopWidth: 1,\r\n      borderLeftWidth: 1,\r\n      borderRightWidth: 1,\r\n      borderColor: theme.color,\r\n      position: 'relative',\r\n      backgroundColor: theme.background,\r\n      width: '100%',\r\n    },\r\n  });\r\n\r\nexport const withToolbar = (MyComponent: any) => {\r\n  const WrappedComponent = React.forwardRef((props, ref) => (\r\n    <ToolbarContext.Consumer>\r\n      {(context) => (\r\n        <MyComponent\r\n          {...props}\r\n          ref={ref}\r\n          apply={context.apply}\r\n          selectedFormats={context.selectedFormats}\r\n        />\r\n      )}\r\n    </ToolbarContext.Consumer>\r\n  ));\r\n\r\n  return WrappedComponent;\r\n};\r\n\r\nexport const useToolbar = (): ContextProps => useContext(ToolbarContext);\r\n"]}