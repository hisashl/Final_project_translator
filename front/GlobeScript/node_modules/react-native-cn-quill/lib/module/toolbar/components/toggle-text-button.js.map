{"version":3,"sources":["toggle-text-button.tsx"],"names":["React","TouchableWithoutFeedback","View","Text","StyleSheet","useToolbar","ToggleTextButton","props","apply","isSelected","theme","styles","name","valueOff","valueOn","valueName","selected","handlePresss","defaultStyles","makeStyles","toolStyle","selection","iconToggle","tool","overlayStyle","overlay","textStyle","image","text","create","absoluteFillObject","backgroundColor","borderRadius","alignItems","justifyContent","paddingHorizontal","marginRight","marginLeft","height","Math","round","size","color","fontWeight","defaultProps"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { TouchableWithoutFeedback, View, Text, StyleSheet } from 'react-native';\r\nimport type { ToolbarTheme } from '../../types';\r\nimport { useToolbar } from './toolbar-context';\r\n\r\ninterface Props {\r\n  valueName: string;\r\n  valueOn: string | number | boolean;\r\n  valueOff?: string | number | boolean;\r\n  name: string;\r\n}\r\n\r\nexport const ToggleTextButton: React.FC<Props> = (props) => {\r\n  const { apply, isSelected, theme, styles } = useToolbar();\r\n  const { name, valueOff, valueOn, valueName } = props;\r\n  const selected = isSelected(name, valueOn);\r\n  const handlePresss = () => apply(name, selected ? valueOff : valueOn);\r\n  const defaultStyles = makeStyles(theme);\r\n  const toolStyle = styles?.selection?.iconToggle?.tool\r\n    ? styles.selection.iconToggle.tool(defaultStyles.tool)\r\n    : defaultStyles.tool;\r\n  const overlayStyle = styles?.selection?.iconToggle?.overlay\r\n    ? styles.selection.iconToggle.overlay(defaultStyles.overlay)\r\n    : defaultStyles.overlay;\r\n  const textStyle = styles?.selection?.iconToggle?.image\r\n    ? styles.selection.iconToggle.image(defaultStyles.text)\r\n    : defaultStyles.text;\r\n  return (\r\n    <TouchableWithoutFeedback onPress={handlePresss}>\r\n      <View style={toolStyle}>\r\n        <Text style={textStyle}>{valueName}</Text>\r\n        {selected && <View style={overlayStyle} />}\r\n      </View>\r\n    </TouchableWithoutFeedback>\r\n  );\r\n};\r\n\r\nconst makeStyles = (theme: ToolbarTheme) =>\r\n  StyleSheet.create({\r\n    overlay: {\r\n      ...StyleSheet.absoluteFillObject,\r\n      backgroundColor: theme.overlay,\r\n      borderRadius: 3,\r\n    },\r\n    tool: {\r\n      borderRadius: 3,\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      paddingHorizontal: 4,\r\n      marginRight: 4,\r\n      marginLeft: 4,\r\n      height: Math.round(theme.size),\r\n    },\r\n    text: {\r\n      color: theme.color,\r\n      fontWeight: 'bold',\r\n    },\r\n  });\r\n\r\nToggleTextButton.defaultProps = {\r\n  valueOff: false,\r\n};\r\n"]}