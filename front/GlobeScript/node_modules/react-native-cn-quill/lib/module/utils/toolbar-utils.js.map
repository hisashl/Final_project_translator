{"version":3,"sources":["toolbar-utils.ts"],"names":["formats","formatType","formatValueType","icons","defaultIcons","getFontName","getToolbarData","options","customIcons","defaultFontFamily","iconSet","isSingle","length","Array","isArray","set","createToolSet","push","i","opt","console","log","tools","ic","format","find","f","name","type","toggle","formatIcon","source","valueOff","valueOn","keys","Object","values","j","key","value","listItems","allowCustoms","map","v","def","defaults","text","filter","indexOf","select","x","icon","undefined","color","fIcon"],"mappings":"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","sourcesContent":["import { formats, formatType, formatValueType } from '../constants/formats';\r\nimport type {\r\n  ColorListData,\r\n  formatDefault,\r\n  TextListData,\r\n  ToggleData,\r\n} from '../types';\r\nimport { icons as defaultIcons } from '../constants/icons';\r\nimport { getFontName } from './editor-utils';\r\n\r\nexport const getToolbarData = (\r\n  options: Array<Array<string | object> | string | object>,\r\n  customIcons?: Record<string, any>,\r\n  defaultFontFamily?: string\r\n): Array<Array<ToggleData | TextListData | ColorListData>> => {\r\n  let iconSet: Array<Array<ToggleData | TextListData | ColorListData>> = [];\r\n  const icons = customIcons\r\n    ? { ...defaultIcons, ...customIcons }\r\n    : defaultIcons;\r\n\r\n  const isSingle: boolean = !(options.length > 0 && Array.isArray(options[0]));\r\n  if (isSingle) {\r\n    const set = createToolSet(options, icons);\r\n    iconSet.push(set);\r\n  } else {\r\n    for (let i = 0; i < options.length; i++) {\r\n      const opt = options[i];\r\n      if (Array.isArray(opt)) {\r\n        const set = createToolSet(opt, icons, defaultFontFamily);\r\n        iconSet.push(set);\r\n      } else\r\n        console.log(opt, 'is not an array, you should pass it as an array');\r\n    }\r\n  }\r\n\r\n  return iconSet;\r\n};\r\n\r\nconst createToolSet = (\r\n  tools: Array<string | object>,\r\n  icons: Record<string, any>,\r\n  defaultFontFamily?: string\r\n): Array<ToggleData | TextListData | ColorListData> => {\r\n  let ic: Array<ToggleData | TextListData | ColorListData> = [];\r\n  for (let i = 0; i < tools.length; i++) {\r\n    const opt = tools[i];\r\n\r\n    if (typeof opt === 'string') {\r\n      const format = formats.find((f) => f.name === opt);\r\n      if ((format && format.type === formatType.toggle) || !format) {\r\n        const formatIcon = icons[opt];\r\n        if (formatIcon) {\r\n          ic.push({\r\n            name: opt,\r\n            source: formatIcon,\r\n            valueOff: false,\r\n            valueOn: true,\r\n            type: formatType.toggle,\r\n          } as ToggleData);\r\n        } else {\r\n          ic.push({\r\n            name: opt,\r\n            valueOff: false,\r\n            valueOn: true,\r\n            type: formatType.toggle,\r\n          } as ToggleData);\r\n        }\r\n      }\r\n    } else if (typeof opt === 'object' && opt !== null) {\r\n      const keys = Object.keys(opt);\r\n      const values = Object.values(opt);\r\n      for (let j = 0; j < keys.length; j++) {\r\n        const key = keys[j];\r\n        const value = values[j];\r\n        const format = formats.find((f) => f.name === key);\r\n        if (typeof value === 'string' || typeof value === 'number') {\r\n          const formatIcon = icons[key][value];\r\n          if (formatIcon) {\r\n            ic.push({\r\n              name: key,\r\n              source: formatIcon,\r\n              valueOff: false,\r\n              valueOn: value,\r\n              type: formatType.toggle,\r\n            } as ToggleData);\r\n          } else {\r\n            ic.push({\r\n              name: key,\r\n              valueOff: false,\r\n              valueOn: value,\r\n              type: formatType.toggle,\r\n            } as ToggleData);\r\n          }\r\n        } else if (Array.isArray(value)) {\r\n          const formatIcon = icons[key];\r\n          let listItems: formatDefault[] = [];\r\n          if ((!format || format.allowCustoms === true) && value.length > 0) {\r\n            listItems = value.map((v) => {\r\n              let def = format?.defaults?.find(\r\n                (f) => f.value === (v !== '' ? v : false)\r\n              );\r\n              if (key === 'font' && defaultFontFamily && def?.value === false) {\r\n                def.name = defaultFontFamily;\r\n              }\r\n              return def\r\n                ? def\r\n                : ({\r\n                    name: v,\r\n                    value:\r\n                      key === 'font' && v !== false && v !== ''\r\n                        ? getFontName(v)\r\n                        : v,\r\n                    type: formatValueType.text,\r\n                  } as formatDefault);\r\n            });\r\n          } else if (format?.defaults && value.length === 0) {\r\n            listItems = format.defaults;\r\n          } else if (format?.defaults && value.length > 0) {\r\n            listItems = format.defaults.filter(\r\n              (f) => value.indexOf(f.value) !== -1\r\n            );\r\n          }\r\n          if (listItems.length > 0) {\r\n            if (!format || format.type === formatType.select) {\r\n              ic.push({\r\n                name: key,\r\n                values: listItems.map((x) => {\r\n                  let icon =\r\n                    x.type === formatValueType.icon\r\n                      ? x.value === false\r\n                        ? icons[key]['']\r\n                        : typeof x.value === 'string'\r\n                        ? icons[key][x.value]\r\n                        : undefined\r\n                      : undefined;\r\n\r\n                  return {\r\n                    name: x.name,\r\n                    valueOff: false,\r\n                    valueOn: x.value,\r\n                    source: icon,\r\n                    type: (\r\n                      x.type === formatValueType.icon && icon ? true : false\r\n                    )\r\n                      ? formatType.icon\r\n                      : formatType.toggle,\r\n                  } as ToggleData;\r\n                }),\r\n                type: formatType.select,\r\n              } as TextListData);\r\n            } else {\r\n              ic.push({\r\n                name: key,\r\n                source: formatIcon,\r\n                values: listItems.map(\r\n                  (x) =>\r\n                    ({\r\n                      name: x.name,\r\n                      valueOff: false,\r\n                      valueOn: x.value,\r\n                      type: formatType.color,\r\n                    } as ToggleData)\r\n                ),\r\n                type: formatType.color,\r\n              } as ColorListData);\r\n            }\r\n          } else {\r\n            const fIcon = icons[key];\r\n            if (fIcon) {\r\n              ic.push({\r\n                name: key,\r\n                source: fIcon,\r\n                valueOff: false,\r\n                valueOn: true,\r\n                type: formatType.toggle,\r\n              } as ToggleData);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return ic;\r\n};\r\n"]}